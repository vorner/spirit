initSidebarItems({"mod":[["broadcast","A multi-producer, multi-consumer broadcast queue. Each sent value is seen by all consumers."],["mpsc","A multi-producer, single-consumer queue for sending values across asynchronous tasks."],["oneshot","A channel for sending a single message between asynchronous tasks."],["watch","A single-producer, multi-consumer channel that only retains the last sent value."]],"struct":[["Barrier","A barrier enables multiple threads to synchronize the beginning of some computation."],["BarrierWaitResult","A `BarrierWaitResult` is returned by `wait` when all threads in the `Barrier` have rendezvoused."],["Mutex","An asynchronous `Mutex`-like type."],["MutexGuard","A handle to a held `Mutex`."],["Notify","Notify a single task to wake up."],["OwnedMutexGuard","An owned handle to a held `Mutex`."],["OwnedSemaphorePermit","An owned permit from the semaphore."],["RwLock","An asynchronous reader-writer lock"],["RwLockReadGuard","RAII structure used to release the shared read access of a lock when dropped."],["RwLockWriteGuard","RAII structure used to release the exclusive write access of a lock when dropped."],["Semaphore","Counting semaphore performing asynchronous permit aquisition."],["SemaphorePermit","A permit from the semaphore."],["TryLockError","Error returned from the `Mutex::try_lock` function."]]});