(function() {var implementors = {};
implementors["linked_hash_map"] = [{"text":"impl&lt;K, V, S&gt; Serialize for LinkedHashMap&lt;K, V, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Serialize + Eq + Hash,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Serialize,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: BuildHasher,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["serde"] = [];
implementors["serde_hjson"] = [{"text":"impl Serialize for Value","synthetic":false,"types":[]}];
implementors["serde_json"] = [{"text":"impl Serialize for Map&lt;String, Value&gt;","synthetic":false,"types":[]},{"text":"impl Serialize for Value","synthetic":false,"types":[]},{"text":"impl Serialize for Number","synthetic":false,"types":[]}];
implementors["serde_yaml"] = [{"text":"impl Serialize for Mapping","synthetic":false,"types":[]},{"text":"impl Serialize for Number","synthetic":false,"types":[]},{"text":"impl Serialize for Value","synthetic":false,"types":[]}];
implementors["spirit"] = [{"text":"impl Serialize for Empty","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Serialize for Hidden&lt;T&gt;","synthetic":false,"types":[]}];
implementors["spirit_daemonize"] = [{"text":"impl Serialize for SecId","synthetic":false,"types":[]},{"text":"impl Serialize for Daemon","synthetic":false,"types":[]},{"text":"impl Serialize for UserDaemon","synthetic":false,"types":[]}];
implementors["spirit_dipstick"] = [{"text":"impl Serialize for Config","synthetic":false,"types":[]}];
implementors["spirit_hyper"] = [{"text":"impl Serialize for HttpMode","synthetic":false,"types":[]},{"text":"impl Serialize for HyperCfg","synthetic":false,"types":[]},{"text":"impl&lt;Transport&gt; Serialize for HyperServer&lt;Transport&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Transport: Serialize,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["spirit_log"] = [{"text":"impl Serialize for Cfg","synthetic":false,"types":[]}];
implementors["spirit_reqwest"] = [{"text":"impl Serialize for ReqwestClient","synthetic":false,"types":[]}];
implementors["spirit_tokio"] = [{"text":"impl&lt;A, B&gt; Serialize for Either&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Serialize,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Serialize,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;A, L&gt; Serialize for WithListenLimits&lt;A, L&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Serialize,<br>&nbsp;&nbsp;&nbsp;&nbsp;L: Serialize,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl Serialize for Limits","synthetic":false,"types":[]},{"text":"impl Serialize for Listen","synthetic":false,"types":[]},{"text":"impl&lt;ExtraCfg, UnixStreamConfig&gt; Serialize for UnixListen&lt;ExtraCfg, UnixStreamConfig&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;ExtraCfg: Serialize,<br>&nbsp;&nbsp;&nbsp;&nbsp;UnixStreamConfig: Serialize,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;ExtraCfg&gt; Serialize for DatagramListen&lt;ExtraCfg&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;ExtraCfg: Serialize,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl Serialize for MaybeDuration","synthetic":false,"types":[]},{"text":"impl Serialize for Listen","synthetic":false,"types":[]},{"text":"impl Serialize for TcpConfig","synthetic":false,"types":[]},{"text":"impl&lt;ExtraCfg, TcpStreamConfigure&gt; Serialize for TcpListen&lt;ExtraCfg, TcpStreamConfigure&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;ExtraCfg: Serialize,<br>&nbsp;&nbsp;&nbsp;&nbsp;TcpStreamConfigure: Serialize,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;ExtraCfg&gt; Serialize for UdpListen&lt;ExtraCfg&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;ExtraCfg: Serialize,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl Serialize for Config","synthetic":false,"types":[]}];
implementors["toml"] = [{"text":"impl Serialize for Map&lt;String, Value&gt;","synthetic":false,"types":[]},{"text":"impl Serialize for Value","synthetic":false,"types":[]}];
implementors["url"] = [{"text":"impl&lt;S&gt; Serialize for Host&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Serialize,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl Serialize for Url","synthetic":false,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()