(function() {var implementors = {};
implementors["async_compression"] = [{"text":"impl&lt;S:&nbsp;Stream&lt;Item = Result&lt;Bytes&gt;&gt;&gt; Stream for BrotliDecoder&lt;S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;S:&nbsp;Stream&lt;Item = Result&lt;Bytes&gt;&gt;&gt; Stream for BrotliEncoder&lt;S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;S:&nbsp;Stream&lt;Item = Result&lt;Bytes&gt;&gt;&gt; Stream for GzipDecoder&lt;S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;S:&nbsp;Stream&lt;Item = Result&lt;Bytes&gt;&gt;&gt; Stream for GzipEncoder&lt;S&gt;","synthetic":false,"types":[]}];
implementors["futures_channel"] = [{"text":"impl&lt;T&gt; Stream for Receiver&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Stream for UnboundedReceiver&lt;T&gt;","synthetic":false,"types":[]}];
implementors["futures_core"] = [];
implementors["hyper"] = [{"text":"impl Stream for Body","synthetic":false,"types":[]}];
implementors["spirit_tokio"] = [{"text":"impl&lt;A, B&gt; Stream for Either&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Stream + Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Stream + Unpin,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;A&gt; Stream for Limited&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Accept + Unpin,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;A, C&gt; Stream for ConfiguredListener&lt;A, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Accept + Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;C: StreamConfig&lt;A::Connection&gt; + Unpin + Send + Sync + 'static,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["tokio_util"] = [{"text":"impl&lt;T, U&gt; Stream for Framed&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: AsyncRead,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Decoder,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T, D&gt; Stream for FramedRead&lt;T, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: AsyncRead,<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Decoder,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T, D&gt; Stream for FramedWrite&lt;T, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Stream,&nbsp;</span>","synthetic":false,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()