(function() {var implementors = {};
implementors["adler"] = [{"text":"impl Clone for Adler32","synthetic":false,"types":[]}];
implementors["aho_corasick"] = [{"text":"impl&lt;S:&nbsp;Clone + StateID&gt; Clone for AhoCorasick&lt;S&gt;","synthetic":false,"types":[]},{"text":"impl Clone for AhoCorasickBuilder","synthetic":false,"types":[]},{"text":"impl Clone for MatchKind","synthetic":false,"types":[]},{"text":"impl Clone for Error","synthetic":false,"types":[]},{"text":"impl Clone for ErrorKind","synthetic":false,"types":[]},{"text":"impl Clone for MatchKind","synthetic":false,"types":[]},{"text":"impl Clone for Config","synthetic":false,"types":[]},{"text":"impl Clone for Builder","synthetic":false,"types":[]},{"text":"impl Clone for Searcher","synthetic":false,"types":[]},{"text":"impl Clone for Match","synthetic":false,"types":[]}];
implementors["alloc_stdlib"] = [{"text":"impl Clone for StandardAlloc","synthetic":false,"types":[]}];
implementors["ansi_term"] = [{"text":"impl Clone for Prefix","synthetic":false,"types":[]},{"text":"impl Clone for Infix","synthetic":false,"types":[]},{"text":"impl Clone for Suffix","synthetic":false,"types":[]},{"text":"impl Clone for Style","synthetic":false,"types":[]},{"text":"impl Clone for Colour","synthetic":false,"types":[]},{"text":"impl&lt;'a, S:&nbsp;'a + ToOwned + ?Sized&gt; Clone for ANSIGenericString&lt;'a, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as ToOwned&gt;::Owned: Debug,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["arc_swap"] = [{"text":"impl&lt;A:&nbsp;Clone, T:&nbsp;Clone, F:&nbsp;Clone&gt; Clone for Map&lt;A, T, F&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for Constant&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;A:&nbsp;Clone, T:&nbsp;Clone&gt; Clone for Cache&lt;A, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;A:&nbsp;Clone, T:&nbsp;Clone, F:&nbsp;Clone&gt; Clone for MapCache&lt;A, T, F&gt;","synthetic":false,"types":[]}];
implementors["arrayvec"] = [{"text":"impl&lt;A&gt; Clone for ArrayString&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Array&lt;Item = u8&gt; + Copy,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for CapacityError&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;A:&nbsp;Array&gt; Clone for IntoIter&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A::Item: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;A:&nbsp;Array&gt; Clone for ArrayVec&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A::Item: Clone,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["async_compression"] = [{"text":"impl Clone for Level","synthetic":false,"types":[]}];
implementors["atomic_refcell"] = [{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for AtomicRefCell&lt;T&gt;","synthetic":false,"types":[]}];
implementors["atty"] = [{"text":"impl Clone for Stream","synthetic":false,"types":[]}];
implementors["backtrace"] = [{"text":"impl Clone for Frame","synthetic":false,"types":[]},{"text":"impl Clone for PrintFmt","synthetic":false,"types":[]},{"text":"impl Clone for Backtrace","synthetic":false,"types":[]},{"text":"impl Clone for BacktraceFrame","synthetic":false,"types":[]},{"text":"impl Clone for BacktraceSymbol","synthetic":false,"types":[]}];
implementors["base64"] = [{"text":"impl Clone for DecodeError","synthetic":false,"types":[]},{"text":"impl Clone for CharacterSet","synthetic":false,"types":[]},{"text":"impl Clone for Config","synthetic":false,"types":[]}];
implementors["brotli"] = [{"text":"impl&lt;'a&gt; Clone for InputReference&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for InputPair&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl Clone for BrotliDistanceParams","synthetic":false,"types":[]},{"text":"impl Clone for Command","synthetic":false,"types":[]},{"text":"impl Clone for BlockTypeCodeCalculator","synthetic":false,"types":[]},{"text":"impl Clone for RecoderState","synthetic":false,"types":[]},{"text":"impl Clone for HuffmanTree","synthetic":false,"types":[]},{"text":"impl&lt;AllocU8:&nbsp;Allocator&lt;u8&gt; + Clone, AllocU16:&nbsp;Allocator&lt;u16&gt; + Clone, AllocI32:&nbsp;Allocator&lt;i32&gt; + Clone, AllocU32:&nbsp;Allocator&lt;u32&gt; + Clone, AllocU64:&nbsp;Allocator&lt;u64&gt; + Clone, AllocCommand:&nbsp;Allocator&lt;Command&gt; + Clone, AllocFloatX:&nbsp;Allocator&lt;floatX&gt; + Clone, AllocV8:&nbsp;Allocator&lt;v8&gt; + Clone, AllocS16:&nbsp;Allocator&lt;s16&gt; + Clone, AllocPDF:&nbsp;Allocator&lt;PDF&gt; + Clone, AllocStaticCommand:&nbsp;Allocator&lt;StaticCommand&gt; + Clone, AllocHistogramLiteral:&nbsp;Allocator&lt;HistogramLiteral&gt; + Clone, AllocHistogramCommand:&nbsp;Allocator&lt;HistogramCommand&gt; + Clone, AllocHistogramDistance:&nbsp;Allocator&lt;HistogramDistance&gt; + Clone, AllocHistogramPair:&nbsp;Allocator&lt;HistogramPair&gt; + Clone, AllocContextType:&nbsp;Allocator&lt;ContextType&gt; + Clone, AllocHuffmanTree:&nbsp;Allocator&lt;HuffmanTree&gt; + Clone, AllocZopfliNode:&nbsp;Allocator&lt;ZopfliNode&gt; + Clone&gt; Clone for CombiningAllocator&lt;AllocU8, AllocU16, AllocI32, AllocU32, AllocU64, AllocCommand, AllocFloatX, AllocV8, AllocS16, AllocPDF, AllocStaticCommand, AllocHistogramLiteral, AllocHistogramCommand, AllocHistogramDistance, AllocHistogramPair, AllocContextType, AllocHuffmanTree, AllocZopfliNode&gt;","synthetic":false,"types":[]},{"text":"impl Clone for DictWord","synthetic":false,"types":[]},{"text":"impl Clone for HistogramPair","synthetic":false,"types":[]},{"text":"impl Clone for HistogramLiteral","synthetic":false,"types":[]},{"text":"impl Clone for HistogramCommand","synthetic":false,"types":[]},{"text":"impl Clone for HistogramDistance","synthetic":false,"types":[]},{"text":"impl Clone for ContextType","synthetic":false,"types":[]},{"text":"impl Clone for PosData","synthetic":false,"types":[]},{"text":"impl Clone for StartPosQueue","synthetic":false,"types":[]},{"text":"impl Clone for Union1","synthetic":false,"types":[]},{"text":"impl Clone for ZopfliNode","synthetic":false,"types":[]},{"text":"impl Clone for BrotliEncoderMode","synthetic":false,"types":[]},{"text":"impl Clone for BrotliHasherParams","synthetic":false,"types":[]},{"text":"impl Clone for BrotliEncoderParams","synthetic":false,"types":[]},{"text":"impl Clone for H9Opts","synthetic":false,"types":[]},{"text":"impl Clone for Struct1","synthetic":false,"types":[]},{"text":"impl Clone for HQ5Sub","synthetic":false,"types":[]},{"text":"impl Clone for HQ7Sub","synthetic":false,"types":[]},{"text":"impl Clone for H9Sub","synthetic":false,"types":[]},{"text":"impl Clone for H5Sub","synthetic":false,"types":[]},{"text":"impl Clone for H6Sub","synthetic":false,"types":[]},{"text":"impl Clone for CodeBlockState","synthetic":false,"types":[]},{"text":"impl Clone for BrotliEncoderStreamState","synthetic":false,"types":[]},{"text":"impl Clone for IsFirst","synthetic":false,"types":[]},{"text":"impl Clone for BrotliEncoderOperation","synthetic":false,"types":[]},{"text":"impl Clone for BucketPopIndex","synthetic":false,"types":[]},{"text":"impl Clone for BlockSwitch","synthetic":false,"types":[]},{"text":"impl Clone for LiteralBlockSwitch","synthetic":false,"types":[]},{"text":"impl Clone for LiteralPredictionModeNibble","synthetic":false,"types":[]},{"text":"impl&lt;SliceType:&nbsp;SliceWrapper&lt;u8&gt; + Clone&gt; Clone for PredictionModeContextMap&lt;SliceType&gt;","synthetic":false,"types":[]},{"text":"impl Clone for CopyCommand","synthetic":false,"types":[]},{"text":"impl Clone for DictCommand","synthetic":false,"types":[]},{"text":"impl&lt;SliceType:&nbsp;SliceWrapper&lt;u8&gt; + Clone&gt; Clone for FeatureFlagSliceType&lt;SliceType&gt;","synthetic":false,"types":[]},{"text":"impl&lt;SliceType:&nbsp;SliceWrapper&lt;u8&gt; + Clone&gt; Clone for LiteralCommand&lt;SliceType&gt;","synthetic":false,"types":[]},{"text":"impl&lt;SliceType:&nbsp;SliceWrapper&lt;u8&gt; + Clone&gt; Clone for Command&lt;SliceType&gt;","synthetic":false,"types":[]},{"text":"impl Clone for SliceOffset","synthetic":false,"types":[]},{"text":"impl Clone for SpeedAndMax","synthetic":false,"types":[]},{"text":"impl Clone for PDF","synthetic":false,"types":[]},{"text":"impl Clone for BrotliEncoderParameter","synthetic":false,"types":[]},{"text":"impl Clone for BroCatliResult","synthetic":false,"types":[]},{"text":"impl Clone for BroccoliState","synthetic":false,"types":[]}];
implementors["brotli_decompressor"] = [{"text":"impl Clone for HuffmanCode","synthetic":false,"types":[]},{"text":"impl Clone for BrotliDecoderErrorCode","synthetic":false,"types":[]},{"text":"impl Clone for CAllocator","synthetic":false,"types":[]}];
implementors["bytes"] = [{"text":"impl Clone for Bytes","synthetic":false,"types":[]},{"text":"impl Clone for BytesMut","synthetic":false,"types":[]}];
implementors["chrono"] = [{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for LocalResult&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Clone for FixedOffset","synthetic":false,"types":[]},{"text":"impl Clone for Local","synthetic":false,"types":[]},{"text":"impl Clone for Utc","synthetic":false,"types":[]},{"text":"impl Clone for NaiveDate","synthetic":false,"types":[]},{"text":"impl Clone for NaiveDateTime","synthetic":false,"types":[]},{"text":"impl Clone for IsoWeek","synthetic":false,"types":[]},{"text":"impl Clone for NaiveTime","synthetic":false,"types":[]},{"text":"impl&lt;Tz:&nbsp;Clone + TimeZone&gt; Clone for Date&lt;Tz&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Tz::Offset: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl Clone for SecondsFormat","synthetic":false,"types":[]},{"text":"impl&lt;Tz:&nbsp;Clone + TimeZone&gt; Clone for DateTime&lt;Tz&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Tz::Offset: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl Clone for Pad","synthetic":false,"types":[]},{"text":"impl Clone for Numeric","synthetic":false,"types":[]},{"text":"impl Clone for InternalNumeric","synthetic":false,"types":[]},{"text":"impl Clone for Fixed","synthetic":false,"types":[]},{"text":"impl Clone for InternalFixed","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for Item&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl Clone for ParseError","synthetic":false,"types":[]},{"text":"impl Clone for Parsed","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for StrftimeItems&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl Clone for RoundingError","synthetic":false,"types":[]},{"text":"impl Clone for Weekday","synthetic":false,"types":[]},{"text":"impl Clone for ParseWeekdayError","synthetic":false,"types":[]},{"text":"impl Clone for Month","synthetic":false,"types":[]},{"text":"impl Clone for ParseMonthError","synthetic":false,"types":[]}];
implementors["clap"] = [{"text":"impl Clone for AppSettings","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b&gt; Clone for App&lt;'a, 'b&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b&gt; Clone for Arg&lt;'a, 'b&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;'a: 'b,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for ArgMatches&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for Values&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for OsValues&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for ArgGroup&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl Clone for ArgSettings","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for SubCommand&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl Clone for Shell","synthetic":false,"types":[]},{"text":"impl Clone for ErrorKind","synthetic":false,"types":[]}];
implementors["config"] = [{"text":"impl Clone for Config","synthetic":false,"types":[]},{"text":"impl Clone for Environment","synthetic":false,"types":[]},{"text":"impl Clone for FileFormat","synthetic":false,"types":[]},{"text":"impl Clone for FileSourceFile","synthetic":false,"types":[]},{"text":"impl Clone for FileSourceString","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for File&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: FileSource,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl Clone for Box&lt;dyn Source + Send + Sync&gt;","synthetic":false,"types":[]},{"text":"impl Clone for Value","synthetic":false,"types":[]}];
implementors["crc32fast"] = [{"text":"impl Clone for Hasher","synthetic":false,"types":[]}];
implementors["crossbeam_channel"] = [{"text":"impl&lt;T&gt; Clone for Sender&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Clone for Receiver&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for SendError&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for TrySendError&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for SendTimeoutError&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Clone for RecvError","synthetic":false,"types":[]},{"text":"impl Clone for TryRecvError","synthetic":false,"types":[]},{"text":"impl Clone for RecvTimeoutError","synthetic":false,"types":[]},{"text":"impl Clone for TrySelectError","synthetic":false,"types":[]},{"text":"impl Clone for SelectTimeoutError","synthetic":false,"types":[]},{"text":"impl Clone for TryReadyError","synthetic":false,"types":[]},{"text":"impl Clone for ReadyTimeoutError","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for Select&lt;'a&gt;","synthetic":false,"types":[]}];
implementors["crossbeam_utils"] = [{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for CachePadded&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Clone for Unparker","synthetic":false,"types":[]},{"text":"impl Clone for WaitGroup","synthetic":false,"types":[]}];
implementors["dipstick"] = [{"text":"impl Clone for Sampling","synthetic":false,"types":[]},{"text":"impl Clone for Buffering","synthetic":false,"types":[]},{"text":"impl Clone for TimeHandle","synthetic":false,"types":[]},{"text":"impl Clone for InputMetric","synthetic":false,"types":[]},{"text":"impl Clone for InputKind","synthetic":false,"types":[]},{"text":"impl Clone for Marker","synthetic":false,"types":[]},{"text":"impl Clone for Counter","synthetic":false,"types":[]},{"text":"impl Clone for Level","synthetic":false,"types":[]},{"text":"impl Clone for Gauge","synthetic":false,"types":[]},{"text":"impl Clone for Timer","synthetic":false,"types":[]},{"text":"impl Clone for Labels","synthetic":false,"types":[]},{"text":"impl Clone for NameParts","synthetic":false,"types":[]},{"text":"impl Clone for MetricName","synthetic":false,"types":[]},{"text":"impl Clone for Proxy","synthetic":false,"types":[]},{"text":"impl Clone for CancelHandle","synthetic":false,"types":[]},{"text":"impl Clone for AtomicBucket","synthetic":false,"types":[]},{"text":"impl Clone for ScoreType","synthetic":false,"types":[]},{"text":"impl Clone for MultiInput","synthetic":false,"types":[]},{"text":"impl Clone for MultiInputScope","synthetic":false,"types":[]},{"text":"impl Clone for InputQueue","synthetic":false,"types":[]},{"text":"impl Clone for InputQueueScope","synthetic":false,"types":[]},{"text":"impl Clone for Void","synthetic":false,"types":[]},{"text":"impl Clone for StatsMapScope","synthetic":false,"types":[]},{"text":"impl&lt;W:&nbsp;Write + Send + Sync + 'static&gt; Clone for Stream&lt;W&gt;","synthetic":false,"types":[]},{"text":"impl&lt;W:&nbsp;Write + Send + Sync + 'static&gt; Clone for TextScope&lt;W&gt;","synthetic":false,"types":[]},{"text":"impl Clone for Log","synthetic":false,"types":[]},{"text":"impl Clone for LogScope","synthetic":false,"types":[]},{"text":"impl Clone for Graphite","synthetic":false,"types":[]},{"text":"impl Clone for GraphiteScope","synthetic":false,"types":[]},{"text":"impl Clone for GraphiteMetric","synthetic":false,"types":[]},{"text":"impl Clone for Statsd","synthetic":false,"types":[]},{"text":"impl Clone for StatsdScope","synthetic":false,"types":[]},{"text":"impl Clone for StatsdMetric","synthetic":false,"types":[]},{"text":"impl Clone for Prometheus","synthetic":false,"types":[]},{"text":"impl Clone for PrometheusScope","synthetic":false,"types":[]}];
implementors["either"] = [{"text":"impl&lt;L:&nbsp;Clone, R:&nbsp;Clone&gt; Clone for Either&lt;L, R&gt;","synthetic":false,"types":[]}];
implementors["err_context"] = [{"text":"impl&lt;'a&gt; Clone for Chain&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, S:&nbsp;Clone&gt; Clone for DisplayChain&lt;'a, S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;M:&nbsp;Clone, E:&nbsp;Clone&gt; Clone for Context&lt;M, E&gt;","synthetic":false,"types":[]}];
implementors["fallible_iterator"] = [{"text":"impl&lt;T:&nbsp;Clone, F:&nbsp;Clone&gt; Clone for Map&lt;T, F&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone, U:&nbsp;Clone&gt; Clone for Chain&lt;T, U&gt;","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone&gt; Clone for Cloned&lt;I&gt;","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone&gt; Clone for Convert&lt;I&gt;","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone&gt; Clone for Enumerate&lt;I&gt;","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone, F:&nbsp;Clone&gt; Clone for Filter&lt;I, F&gt;","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone, F:&nbsp;Clone&gt; Clone for FilterMap&lt;I, F&gt;","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone, U:&nbsp;Clone, F:&nbsp;Clone&gt; Clone for FlatMap&lt;I, U, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;U: IntoFallibleIterator,<br>&nbsp;&nbsp;&nbsp;&nbsp;U::IntoFallibleIter: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;I&gt; Clone for Flatten&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: FallibleIterator + Clone,<br>&nbsp;&nbsp;&nbsp;&nbsp;I::Item: IntoFallibleIterator,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I::Item as IntoFallibleIterator&gt;::IntoFallibleIter: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone&gt; Clone for Fuse&lt;I&gt;","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone, F:&nbsp;Clone&gt; Clone for Inspect&lt;I, F&gt;","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone&gt; Clone for Iterator&lt;I&gt;","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone, F:&nbsp;Clone&gt; Clone for MapErr&lt;I, F&gt;","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone + FallibleIterator&gt; Clone for Peekable&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I::Item: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone&gt; Clone for Rev&lt;I&gt;","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone, St:&nbsp;Clone, F:&nbsp;Clone&gt; Clone for Scan&lt;I, St, F&gt;","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone&gt; Clone for Skip&lt;I&gt;","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone, P:&nbsp;Clone&gt; Clone for SkipWhile&lt;I, P&gt;","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone&gt; Clone for StepBy&lt;I&gt;","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone&gt; Clone for Take&lt;I&gt;","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone, P:&nbsp;Clone&gt; Clone for TakeWhile&lt;I, P&gt;","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone&gt; Clone for Cycle&lt;I&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone, U:&nbsp;Clone&gt; Clone for Zip&lt;T, U&gt;","synthetic":false,"types":[]}];
implementors["flate2"] = [{"text":"impl Clone for GzHeader","synthetic":false,"types":[]},{"text":"impl Clone for FlushCompress","synthetic":false,"types":[]},{"text":"impl Clone for FlushDecompress","synthetic":false,"types":[]},{"text":"impl Clone for Status","synthetic":false,"types":[]},{"text":"impl Clone for Compression","synthetic":false,"types":[]}];
implementors["form_urlencoded"] = [{"text":"impl&lt;'a&gt; Clone for Parse&lt;'a&gt;","synthetic":false,"types":[]}];
implementors["futures_channel"] = [{"text":"impl Clone for SendError","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for TrySendError&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Clone for Sender&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Clone for UnboundedSender&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Clone for Canceled","synthetic":false,"types":[]}];
implementors["futures_util"] = [{"text":"impl&lt;Fut&gt; Clone for Shared&lt;Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Future,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Clone for Pending&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;F:&nbsp;Clone&gt; Clone for OptionFuture&lt;F&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for Ready&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;A:&nbsp;Clone, B:&nbsp;Clone&gt; Clone for Either&lt;A, B&gt;","synthetic":false,"types":[]},{"text":"impl&lt;Fut:&nbsp;Clone&gt; Clone for Abortable&lt;Fut&gt;","synthetic":false,"types":[]},{"text":"impl Clone for AbortHandle","synthetic":false,"types":[]},{"text":"impl Clone for Aborted","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone&gt; Clone for Iter&lt;I&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for Repeat&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Clone for Empty&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Clone for Pending&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for AllowStdIo&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for Cursor&lt;T&gt;","synthetic":false,"types":[]}];
implementors["gimli"] = [{"text":"impl Clone for Format","synthetic":false,"types":[]},{"text":"impl Clone for Encoding","synthetic":false,"types":[]},{"text":"impl Clone for LineEncoding","synthetic":false,"types":[]},{"text":"impl Clone for Register","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for DebugAbbrevOffset&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for DebugAddrBase&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for DebugAddrIndex&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for DebugInfoOffset&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for DebugLineOffset&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for DebugLineStrOffset&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for LocationListsOffset&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for DebugLocListsBase&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for DebugLocListsIndex&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for DebugMacinfoOffset&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for DebugMacroOffset&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for RangeListsOffset&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for DebugRngListsBase&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for DebugRngListsIndex&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for DebugStrOffset&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for DebugStrOffsetsBase&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for DebugStrOffsetsIndex&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for DebugTypesOffset&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Clone for DebugTypeSignature","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for DebugFrameOffset&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for EhFrameOffset&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for UnitSectionOffset&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Clone for SectionId","synthetic":false,"types":[]},{"text":"impl Clone for DwoId","synthetic":false,"types":[]},{"text":"impl Clone for DwarfFileType","synthetic":false,"types":[]},{"text":"impl Clone for Arm","synthetic":false,"types":[]},{"text":"impl Clone for X86","synthetic":false,"types":[]},{"text":"impl Clone for X86_64","synthetic":false,"types":[]},{"text":"impl Clone for DwUt","synthetic":false,"types":[]},{"text":"impl Clone for DwCfa","synthetic":false,"types":[]},{"text":"impl Clone for DwChildren","synthetic":false,"types":[]},{"text":"impl Clone for DwTag","synthetic":false,"types":[]},{"text":"impl Clone for DwAt","synthetic":false,"types":[]},{"text":"impl Clone for DwForm","synthetic":false,"types":[]},{"text":"impl Clone for DwAte","synthetic":false,"types":[]},{"text":"impl Clone for DwLle","synthetic":false,"types":[]},{"text":"impl Clone for DwDs","synthetic":false,"types":[]},{"text":"impl Clone for DwEnd","synthetic":false,"types":[]},{"text":"impl Clone for DwAccess","synthetic":false,"types":[]},{"text":"impl Clone for DwVis","synthetic":false,"types":[]},{"text":"impl Clone for DwVirtuality","synthetic":false,"types":[]},{"text":"impl Clone for DwLang","synthetic":false,"types":[]},{"text":"impl Clone for DwAddr","synthetic":false,"types":[]},{"text":"impl Clone for DwId","synthetic":false,"types":[]},{"text":"impl Clone for DwCc","synthetic":false,"types":[]},{"text":"impl Clone for DwInl","synthetic":false,"types":[]},{"text":"impl Clone for DwOrd","synthetic":false,"types":[]},{"text":"impl Clone for DwDsc","synthetic":false,"types":[]},{"text":"impl Clone for DwIdx","synthetic":false,"types":[]},{"text":"impl Clone for DwDefaulted","synthetic":false,"types":[]},{"text":"impl Clone for DwLns","synthetic":false,"types":[]},{"text":"impl Clone for DwLne","synthetic":false,"types":[]},{"text":"impl Clone for DwLnct","synthetic":false,"types":[]},{"text":"impl Clone for DwMacro","synthetic":false,"types":[]},{"text":"impl Clone for DwRle","synthetic":false,"types":[]},{"text":"impl Clone for DwOp","synthetic":false,"types":[]},{"text":"impl Clone for DwEhPe","synthetic":false,"types":[]},{"text":"impl Clone for RunTimeEndian","synthetic":false,"types":[]},{"text":"impl Clone for LittleEndian","synthetic":false,"types":[]},{"text":"impl Clone for BigEndian","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Clone&gt; Clone for DebugAddr&lt;R&gt;","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Clone + Reader&gt; Clone for DebugFrame&lt;R&gt;","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Clone + Reader&gt; Clone for EhFrameHdr&lt;R&gt;","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Clone + Reader&gt; Clone for ParsedEhFrameHdr&lt;R&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, R:&nbsp;Clone + Reader&gt; Clone for EhHdrTable&lt;'a, R&gt;","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Clone + Reader&gt; Clone for EhFrame&lt;R&gt;","synthetic":false,"types":[]},{"text":"impl Clone for BaseAddresses","synthetic":false,"types":[]},{"text":"impl Clone for SectionBaseAddresses","synthetic":false,"types":[]},{"text":"impl&lt;'bases, Section:&nbsp;Clone, R:&nbsp;Clone&gt; Clone for CfiEntriesIter&lt;'bases, Section, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Reader,<br>&nbsp;&nbsp;&nbsp;&nbsp;Section: UnwindSection&lt;R&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'bases, Section:&nbsp;Clone, R:&nbsp;Clone&gt; Clone for CieOrFde&lt;'bases, Section, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Reader,<br>&nbsp;&nbsp;&nbsp;&nbsp;Section: UnwindSection&lt;R&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl Clone for Augmentation","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Clone, Offset:&nbsp;Clone&gt; Clone for CommonInformationEntry&lt;R, Offset&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Reader&lt;Offset = Offset&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;Offset: ReaderOffset,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'bases, Section:&nbsp;Clone, R:&nbsp;Clone&gt; Clone for PartialFrameDescriptionEntry&lt;'bases, Section, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Reader,<br>&nbsp;&nbsp;&nbsp;&nbsp;Section: UnwindSection&lt;R&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;R::Offset: Clone,<br>&nbsp;&nbsp;&nbsp;&nbsp;R::Offset: Clone,<br>&nbsp;&nbsp;&nbsp;&nbsp;Section::Offset: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Clone, Offset:&nbsp;Clone&gt; Clone for FrameDescriptionEntry&lt;R, Offset&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Reader&lt;Offset = Offset&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;Offset: ReaderOffset,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Clone + Reader&gt; Clone for UninitializedUnwindContext&lt;R&gt;","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Clone + Reader&gt; Clone for UnwindContext&lt;R&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'iter, R:&nbsp;Clone&gt; Clone for RegisterRuleIter&lt;'iter, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Reader,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Clone + Reader&gt; Clone for UnwindTableRow&lt;R&gt;","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Clone + Reader&gt; Clone for CfaRule&lt;R&gt;","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Clone + Reader&gt; Clone for RegisterRule&lt;R&gt;","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Clone + Reader&gt; Clone for CallFrameInstruction&lt;R&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, R:&nbsp;Clone + Reader&gt; Clone for CallFrameInstructionIter&lt;'a, R&gt;","synthetic":false,"types":[]},{"text":"impl Clone for Pointer","synthetic":false,"types":[]},{"text":"impl&lt;'input, Endian:&nbsp;Clone&gt; Clone for EndianSlice&lt;'input, Endian&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Endian: Endianity,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl Clone for ReaderOffsetId","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Clone&gt; Clone for DebugAbbrev&lt;R&gt;","synthetic":false,"types":[]},{"text":"impl Clone for Abbreviations","synthetic":false,"types":[]},{"text":"impl Clone for Abbreviation","synthetic":false,"types":[]},{"text":"impl Clone for AttributeSpecification","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone + Copy&gt; Clone for ArangeEntry&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Clone + Reader&gt; Clone for DebugAranges&lt;R&gt;","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Clone + Reader&gt; Clone for ArangeEntryIter&lt;R&gt;","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Clone&gt; Clone for DebugLine&lt;R&gt;","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Clone, Program:&nbsp;Clone, Offset:&nbsp;Clone&gt; Clone for LineRows&lt;R, Program, Offset&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Program: LineProgram&lt;R, Offset&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Reader&lt;Offset = Offset&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;Offset: ReaderOffset,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Clone, Offset:&nbsp;Clone&gt; Clone for LineInstruction&lt;R, Offset&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Reader&lt;Offset = Offset&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;Offset: ReaderOffset,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Clone + Reader&gt; Clone for LineInstructions&lt;R&gt;","synthetic":false,"types":[]},{"text":"impl Clone for LineRow","synthetic":false,"types":[]},{"text":"impl Clone for ColumnType","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Clone + Reader&gt; Clone for LineSequence&lt;R&gt;","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Clone, Offset:&nbsp;Clone&gt; Clone for LineProgramHeader&lt;R, Offset&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Reader&lt;Offset = Offset&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;Offset: ReaderOffset,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Clone, Offset:&nbsp;Clone&gt; Clone for IncompleteLineProgram&lt;R, Offset&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Reader&lt;Offset = Offset&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;Offset: ReaderOffset,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Clone, Offset:&nbsp;Clone&gt; Clone for CompleteLineProgram&lt;R, Offset&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Reader&lt;Offset = Offset&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;Offset: ReaderOffset,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Clone, Offset:&nbsp;Clone&gt; Clone for FileEntry&lt;R, Offset&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Reader&lt;Offset = Offset&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;Offset: ReaderOffset,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl Clone for FileEntryFormat","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Clone&gt; Clone for DebugLoc&lt;R&gt;","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Clone&gt; Clone for DebugLocLists&lt;R&gt;","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Clone&gt; Clone for LocationLists&lt;R&gt;","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Clone + Reader&gt; Clone for RawLocListEntry&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R::Offset: Clone,<br>&nbsp;&nbsp;&nbsp;&nbsp;R::Offset: Clone,<br>&nbsp;&nbsp;&nbsp;&nbsp;R::Offset: Clone,<br>&nbsp;&nbsp;&nbsp;&nbsp;R::Offset: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Clone + Reader&gt; Clone for LocationListEntry&lt;R&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for DieReference&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Clone, Offset:&nbsp;Clone&gt; Clone for Operation&lt;R, Offset&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Reader&lt;Offset = Offset&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;Offset: ReaderOffset,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Clone, Offset:&nbsp;Clone&gt; Clone for Location&lt;R, Offset&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Reader&lt;Offset = Offset&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;Offset: ReaderOffset,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Clone, Offset:&nbsp;Clone&gt; Clone for Piece&lt;R, Offset&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Reader&lt;Offset = Offset&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;Offset: ReaderOffset,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Clone + Reader&gt; Clone for Expression&lt;R&gt;","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Clone + Reader&gt; Clone for OperationIter&lt;R&gt;","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Clone + Reader&gt; Clone for PubNamesEntry&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R::Offset: Clone,<br>&nbsp;&nbsp;&nbsp;&nbsp;R::Offset: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Clone + Reader&gt; Clone for DebugPubNames&lt;R&gt;","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Clone + Reader&gt; Clone for PubNamesEntryIter&lt;R&gt;","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Clone + Reader&gt; Clone for PubTypesEntry&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R::Offset: Clone,<br>&nbsp;&nbsp;&nbsp;&nbsp;R::Offset: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Clone + Reader&gt; Clone for DebugPubTypes&lt;R&gt;","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Clone + Reader&gt; Clone for PubTypesEntryIter&lt;R&gt;","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Clone&gt; Clone for DebugRanges&lt;R&gt;","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Clone&gt; Clone for DebugRngLists&lt;R&gt;","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Clone&gt; Clone for RangeLists&lt;R&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for RawRngListEntry&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Clone for Range","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Clone&gt; Clone for DebugStr&lt;R&gt;","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Clone&gt; Clone for DebugStrOffsets&lt;R&gt;","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Clone&gt; Clone for DebugLineStr&lt;R&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for UnitOffset&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Clone&gt; Clone for DebugInfo&lt;R&gt;","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Clone + Reader&gt; Clone for DebugInfoUnitHeadersIter&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R::Offset: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;Offset:&nbsp;Clone&gt; Clone for UnitType&lt;Offset&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Offset: ReaderOffset,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Clone, Offset:&nbsp;Clone&gt; Clone for UnitHeader&lt;R, Offset&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Reader&lt;Offset = Offset&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;Offset: ReaderOffset,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'abbrev, 'unit, R:&nbsp;Clone, Offset:&nbsp;Clone&gt; Clone for DebuggingInformationEntry&lt;'abbrev, 'unit, R, Offset&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Reader&lt;Offset = Offset&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;Offset: ReaderOffset,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Clone, Offset:&nbsp;Clone&gt; Clone for AttributeValue&lt;R, Offset&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Reader&lt;Offset = Offset&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;Offset: ReaderOffset,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Clone + Reader&gt; Clone for Attribute&lt;R&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'abbrev, 'entry, 'unit, R:&nbsp;Clone + Reader&gt; Clone for AttrsIter&lt;'abbrev, 'entry, 'unit, R&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'abbrev, 'unit, R:&nbsp;Clone&gt; Clone for EntriesRaw&lt;'abbrev, 'unit, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Reader,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'abbrev, 'unit, R:&nbsp;Clone&gt; Clone for EntriesCursor&lt;'abbrev, 'unit, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Reader,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'abbrev, 'unit, R:&nbsp;Clone&gt; Clone for EntriesTree&lt;'abbrev, 'unit, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Reader,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Clone&gt; Clone for DebugTypes&lt;R&gt;","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Clone + Reader&gt; Clone for DebugTypesUnitHeadersIter&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R::Offset: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl Clone for ValueType","synthetic":false,"types":[]},{"text":"impl Clone for Value","synthetic":false,"types":[]},{"text":"impl Clone for Error","synthetic":false,"types":[]}];
implementors["h2"] = [{"text":"impl Clone for Reason","synthetic":false,"types":[]},{"text":"impl Clone for Builder","synthetic":false,"types":[]},{"text":"impl&lt;B&gt; Clone for SendRequest&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Buf,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl Clone for Builder","synthetic":false,"types":[]},{"text":"impl Clone for StreamId","synthetic":false,"types":[]},{"text":"impl Clone for FlowControl","synthetic":false,"types":[]}];
implementors["hashbrown"] = [{"text":"impl&lt;T&gt; Clone for Bucket&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for RawTable&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Clone for RawIter&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;K:&nbsp;Clone, V:&nbsp;Clone, S:&nbsp;Clone&gt; Clone for HashMap&lt;K, V, S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;K, V, '_&gt; Clone for Iter&lt;'_, K, V&gt;","synthetic":false,"types":[]},{"text":"impl&lt;K, V, '_&gt; Clone for Keys&lt;'_, K, V&gt;","synthetic":false,"types":[]},{"text":"impl&lt;K, V, '_&gt; Clone for Values&lt;'_, K, V&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone, S:&nbsp;Clone&gt; Clone for HashSet&lt;T, S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;K, '_&gt; Clone for Iter&lt;'_, K&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T, S, '_&gt; Clone for Intersection&lt;'_, T, S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T, S, '_&gt; Clone for Difference&lt;'_, T, S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T, S, '_&gt; Clone for SymmetricDifference&lt;'_, T, S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T, S, '_&gt; Clone for Union&lt;'_, T, S&gt;","synthetic":false,"types":[]},{"text":"impl Clone for TryReserveError","synthetic":false,"types":[]}];
implementors["http"] = [{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for HeaderMap&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Clone for HeaderName","synthetic":false,"types":[]},{"text":"impl Clone for HeaderValue","synthetic":false,"types":[]},{"text":"impl Clone for Method","synthetic":false,"types":[]},{"text":"impl Clone for StatusCode","synthetic":false,"types":[]},{"text":"impl Clone for Authority","synthetic":false,"types":[]},{"text":"impl Clone for PathAndQuery","synthetic":false,"types":[]},{"text":"impl Clone for Scheme","synthetic":false,"types":[]},{"text":"impl Clone for Uri","synthetic":false,"types":[]},{"text":"impl Clone for Version","synthetic":false,"types":[]}];
implementors["http_body"] = [{"text":"impl Clone for SizeHint","synthetic":false,"types":[]}];
implementors["httparse"] = [{"text":"impl Clone for Error","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for Status&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for Header&lt;'a&gt;","synthetic":false,"types":[]}];
implementors["httpdate"] = [{"text":"impl Clone for HttpDate","synthetic":false,"types":[]}];
implementors["humantime"] = [{"text":"impl Clone for Error","synthetic":false,"types":[]},{"text":"impl Clone for FormattedDuration","synthetic":false,"types":[]},{"text":"impl Clone for Duration","synthetic":false,"types":[]},{"text":"impl Clone for Timestamp","synthetic":false,"types":[]},{"text":"impl Clone for Error","synthetic":false,"types":[]},{"text":"impl Clone for Rfc3339Timestamp","synthetic":false,"types":[]}];
implementors["hyper"] = [{"text":"impl Clone for Builder","synthetic":false,"types":[]},{"text":"impl Clone for Name","synthetic":false,"types":[]},{"text":"impl Clone for GaiResolver","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Clone&gt; Clone for HttpConnector&lt;R&gt;","synthetic":false,"types":[]},{"text":"impl Clone for HttpInfo","synthetic":false,"types":[]},{"text":"impl&lt;C:&nbsp;Clone, B&gt; Clone for Client&lt;C, B&gt;","synthetic":false,"types":[]},{"text":"impl Clone for Builder","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone&gt; Clone for Http&lt;E&gt;","synthetic":false,"types":[]}];
implementors["hyper_tls"] = [{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for HttpsConnector&lt;T&gt;","synthetic":false,"types":[]}];
implementors["idna"] = [{"text":"impl Clone for Config","synthetic":false,"types":[]}];
implementors["indexmap"] = [{"text":"impl&lt;K, V, S&gt; Clone for IndexMap&lt;K, V, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Clone,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Clone,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;K, V, '_&gt; Clone for Keys&lt;'_, K, V&gt;","synthetic":false,"types":[]},{"text":"impl&lt;K, V, '_&gt; Clone for Values&lt;'_, K, V&gt;","synthetic":false,"types":[]},{"text":"impl&lt;K, V, '_&gt; Clone for Iter&lt;'_, K, V&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T, S&gt; Clone for IndexSet&lt;T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Clone,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T, '_&gt; Clone for Iter&lt;'_, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T, S, '_&gt; Clone for Difference&lt;'_, T, S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T, S, '_&gt; Clone for Intersection&lt;'_, T, S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T, S1, S2, '_&gt; Clone for SymmetricDifference&lt;'_, T, S1, S2&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T, S, '_&gt; Clone for Union&lt;'_, T, S&gt;","synthetic":false,"types":[]}];
implementors["ini"] = [{"text":"impl Clone for EscapePolicy","synthetic":false,"types":[]},{"text":"impl Clone for Ini","synthetic":false,"types":[]}];
implementors["ipnet"] = [{"text":"impl Clone for IpAddrRange","synthetic":false,"types":[]},{"text":"impl Clone for Ipv4AddrRange","synthetic":false,"types":[]},{"text":"impl Clone for Ipv6AddrRange","synthetic":false,"types":[]},{"text":"impl Clone for IpNet","synthetic":false,"types":[]},{"text":"impl Clone for Ipv4Net","synthetic":false,"types":[]},{"text":"impl Clone for Ipv6Net","synthetic":false,"types":[]},{"text":"impl Clone for PrefixLenError","synthetic":false,"types":[]},{"text":"impl Clone for IpSubnets","synthetic":false,"types":[]},{"text":"impl Clone for Ipv4Subnets","synthetic":false,"types":[]},{"text":"impl Clone for Ipv6Subnets","synthetic":false,"types":[]},{"text":"impl Clone for AddrParseError","synthetic":false,"types":[]}];
implementors["itertools"] = [{"text":"impl&lt;I:&nbsp;Clone&gt; Clone for MultiProduct&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Iterator + Clone,<br>&nbsp;&nbsp;&nbsp;&nbsp;I::Item: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone, J:&nbsp;Clone&gt; Clone for Interleave&lt;I, J&gt;","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone, J:&nbsp;Clone&gt; Clone for InterleaveShortest&lt;I, J&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Iterator,<br>&nbsp;&nbsp;&nbsp;&nbsp;J: Iterator&lt;Item = I::Item&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone&gt; Clone for PutBack&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Iterator,<br>&nbsp;&nbsp;&nbsp;&nbsp;I::Item: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone, J:&nbsp;Clone&gt; Clone for Product&lt;I, J&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Iterator,<br>&nbsp;&nbsp;&nbsp;&nbsp;I::Item: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone, F:&nbsp;Clone&gt; Clone for Batching&lt;I, F&gt;","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone&gt; Clone for Step&lt;I&gt;","synthetic":false,"types":[]},{"text":"impl&lt;I, J, F&gt; Clone for MergeBy&lt;I, J, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Iterator,<br>&nbsp;&nbsp;&nbsp;&nbsp;J: Iterator&lt;Item = I::Item&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;Peekable&lt;I&gt;: Clone,<br>&nbsp;&nbsp;&nbsp;&nbsp;Peekable&lt;J&gt;: Clone,<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone, F:&nbsp;Clone&gt; Clone for Coalesce&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Iterator,<br>&nbsp;&nbsp;&nbsp;&nbsp;I::Item: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone, Pred:&nbsp;Clone&gt; Clone for DedupBy&lt;I, Pred&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Iterator,<br>&nbsp;&nbsp;&nbsp;&nbsp;I::Item: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone&gt; Clone for WhileSome&lt;I&gt;","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone, T:&nbsp;Clone&gt; Clone for TupleCombinations&lt;I, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Iterator,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: HasCombination&lt;I&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;T::Combination: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone, R:&nbsp;Clone&gt; Clone for MapInto&lt;I, R&gt;","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone, F:&nbsp;Clone&gt; Clone for MapResults&lt;I, F&gt;","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone, F:&nbsp;Clone&gt; Clone for Positions&lt;I, F&gt;","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone, F:&nbsp;Clone&gt; Clone for Update&lt;I, F&gt;","synthetic":false,"types":[]},{"text":"impl&lt;A:&nbsp;Clone, B:&nbsp;Clone&gt; Clone for EitherOrBoth&lt;A, B&gt;","synthetic":false,"types":[]},{"text":"impl&lt;I, J&gt; Clone for ConsTuples&lt;I, J&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Clone + Iterator&lt;Item = J&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;I&gt; Clone for Combinations&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Clone + Iterator,<br>&nbsp;&nbsp;&nbsp;&nbsp;I::Item: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone&gt; Clone for CombinationsWithReplacement&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Iterator,<br>&nbsp;&nbsp;&nbsp;&nbsp;I::Item: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone&gt; Clone for ExactlyOneError&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Iterator,<br>&nbsp;&nbsp;&nbsp;&nbsp;I::Item: Clone,<br>&nbsp;&nbsp;&nbsp;&nbsp;I::Item: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, I:&nbsp;Clone, F:&nbsp;Clone&gt; Clone for FormatWith&lt;'a, I, F&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, I:&nbsp;Clone&gt; Clone for Format&lt;'a, I&gt;","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone&gt; Clone for Intersperse&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Iterator,<br>&nbsp;&nbsp;&nbsp;&nbsp;I::Item: Clone,<br>&nbsp;&nbsp;&nbsp;&nbsp;I::Item: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;I, F&gt; Clone for KMergeBy&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Iterator + Clone,<br>&nbsp;&nbsp;&nbsp;&nbsp;I::Item: Clone,<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;I, J, F&gt; Clone for MergeJoinBy&lt;I, J, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Iterator,<br>&nbsp;&nbsp;&nbsp;&nbsp;J: Iterator,<br>&nbsp;&nbsp;&nbsp;&nbsp;PutBack&lt;Fuse&lt;I&gt;&gt;: Clone,<br>&nbsp;&nbsp;&nbsp;&nbsp;PutBack&lt;Fuse&lt;J&gt;&gt;: Clone,<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for MinMaxResult&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone&gt; Clone for MultiPeek&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Iterator,<br>&nbsp;&nbsp;&nbsp;&nbsp;I::Item: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone, F:&nbsp;Clone&gt; Clone for PadUsing&lt;I, F&gt;","synthetic":false,"types":[]},{"text":"impl&lt;I&gt; Clone for Permutations&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Clone + Iterator,<br>&nbsp;&nbsp;&nbsp;&nbsp;I::Item: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone + Iterator&gt; Clone for PutBackN&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I::Item: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;I&gt; Clone for RcIter&lt;I&gt;","synthetic":false,"types":[]},{"text":"impl&lt;A:&nbsp;Clone&gt; Clone for RepeatN&lt;A&gt;","synthetic":false,"types":[]},{"text":"impl&lt;F:&nbsp;Clone&gt; Clone for RepeatCall&lt;F&gt;","synthetic":false,"types":[]},{"text":"impl&lt;St:&nbsp;Clone, F:&nbsp;Clone&gt; Clone for Unfold&lt;St, F&gt;","synthetic":false,"types":[]},{"text":"impl&lt;St:&nbsp;Clone, F:&nbsp;Clone&gt; Clone for Iterate&lt;St, F&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for TupleBuffer&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: HomogeneousTuple,<br>&nbsp;&nbsp;&nbsp;&nbsp;T::Buffer: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone, T:&nbsp;Clone&gt; Clone for Tuples&lt;I, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Iterator&lt;Item = T::Item&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: HomogeneousTuple,<br>&nbsp;&nbsp;&nbsp;&nbsp;T::Buffer: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone, T:&nbsp;Clone&gt; Clone for TupleWindows&lt;I, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Iterator&lt;Item = T::Item&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: HomogeneousTuple,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone + Iterator, V:&nbsp;Clone, F:&nbsp;Clone&gt; Clone for UniqueBy&lt;I, V, F&gt;","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone + Iterator&gt; Clone for Unique&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I::Item: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;I&gt; Clone for WithPosition&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Clone + Iterator,<br>&nbsp;&nbsp;&nbsp;&nbsp;I::Item: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for Position&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone, J:&nbsp;Clone&gt; Clone for ZipEq&lt;I, J&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone, U:&nbsp;Clone&gt; Clone for ZipLongest&lt;T, U&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for Zip&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for FoldWhile&lt;T&gt;","synthetic":false,"types":[]}];
implementors["itoa"] = [{"text":"impl Clone for Buffer","synthetic":false,"types":[]}];
implementors["lexical_core"] = [{"text":"impl Clone for ErrorCode","synthetic":false,"types":[]},{"text":"impl Clone for Error","synthetic":false,"types":[]}];
implementors["libc"] = [{"text":"impl Clone for DIR","synthetic":false,"types":[]},{"text":"impl Clone for group","synthetic":false,"types":[]},{"text":"impl Clone for utimbuf","synthetic":false,"types":[]},{"text":"impl Clone for timeval","synthetic":false,"types":[]},{"text":"impl Clone for timespec","synthetic":false,"types":[]},{"text":"impl Clone for rlimit","synthetic":false,"types":[]},{"text":"impl Clone for rusage","synthetic":false,"types":[]},{"text":"impl Clone for ipv6_mreq","synthetic":false,"types":[]},{"text":"impl Clone for hostent","synthetic":false,"types":[]},{"text":"impl Clone for iovec","synthetic":false,"types":[]},{"text":"impl Clone for pollfd","synthetic":false,"types":[]},{"text":"impl Clone for winsize","synthetic":false,"types":[]},{"text":"impl Clone for linger","synthetic":false,"types":[]},{"text":"impl Clone for sigval","synthetic":false,"types":[]},{"text":"impl Clone for itimerval","synthetic":false,"types":[]},{"text":"impl Clone for tms","synthetic":false,"types":[]},{"text":"impl Clone for servent","synthetic":false,"types":[]},{"text":"impl Clone for protoent","synthetic":false,"types":[]},{"text":"impl Clone for FILE","synthetic":false,"types":[]},{"text":"impl Clone for fpos_t","synthetic":false,"types":[]},{"text":"impl Clone for timezone","synthetic":false,"types":[]},{"text":"impl Clone for in_addr","synthetic":false,"types":[]},{"text":"impl Clone for ip_mreq","synthetic":false,"types":[]},{"text":"impl Clone for ip_mreq_source","synthetic":false,"types":[]},{"text":"impl Clone for sockaddr","synthetic":false,"types":[]},{"text":"impl Clone for sockaddr_in","synthetic":false,"types":[]},{"text":"impl Clone for sockaddr_in6","synthetic":false,"types":[]},{"text":"impl Clone for addrinfo","synthetic":false,"types":[]},{"text":"impl Clone for sockaddr_ll","synthetic":false,"types":[]},{"text":"impl Clone for fd_set","synthetic":false,"types":[]},{"text":"impl Clone for tm","synthetic":false,"types":[]},{"text":"impl Clone for sched_param","synthetic":false,"types":[]},{"text":"impl Clone for Dl_info","synthetic":false,"types":[]},{"text":"impl Clone for lconv","synthetic":false,"types":[]},{"text":"impl Clone for in_pktinfo","synthetic":false,"types":[]},{"text":"impl Clone for ifaddrs","synthetic":false,"types":[]},{"text":"impl Clone for in6_rtmsg","synthetic":false,"types":[]},{"text":"impl Clone for arpreq","synthetic":false,"types":[]},{"text":"impl Clone for arpreq_old","synthetic":false,"types":[]},{"text":"impl Clone for arphdr","synthetic":false,"types":[]},{"text":"impl Clone for mmsghdr","synthetic":false,"types":[]},{"text":"impl Clone for epoll_event","synthetic":false,"types":[]},{"text":"impl Clone for sockaddr_un","synthetic":false,"types":[]},{"text":"impl Clone for sockaddr_storage","synthetic":false,"types":[]},{"text":"impl Clone for utsname","synthetic":false,"types":[]},{"text":"impl Clone for sigevent","synthetic":false,"types":[]},{"text":"impl Clone for fpos64_t","synthetic":false,"types":[]},{"text":"impl Clone for rlimit64","synthetic":false,"types":[]},{"text":"impl Clone for glob_t","synthetic":false,"types":[]},{"text":"impl Clone for passwd","synthetic":false,"types":[]},{"text":"impl Clone for spwd","synthetic":false,"types":[]},{"text":"impl Clone for dqblk","synthetic":false,"types":[]},{"text":"impl Clone for signalfd_siginfo","synthetic":false,"types":[]},{"text":"impl Clone for itimerspec","synthetic":false,"types":[]},{"text":"impl Clone for fsid_t","synthetic":false,"types":[]},{"text":"impl Clone for packet_mreq","synthetic":false,"types":[]},{"text":"impl Clone for cpu_set_t","synthetic":false,"types":[]},{"text":"impl Clone for if_nameindex","synthetic":false,"types":[]},{"text":"impl Clone for msginfo","synthetic":false,"types":[]},{"text":"impl Clone for sembuf","synthetic":false,"types":[]},{"text":"impl Clone for input_event","synthetic":false,"types":[]},{"text":"impl Clone for input_id","synthetic":false,"types":[]},{"text":"impl Clone for input_absinfo","synthetic":false,"types":[]},{"text":"impl Clone for input_keymap_entry","synthetic":false,"types":[]},{"text":"impl Clone for input_mask","synthetic":false,"types":[]},{"text":"impl Clone for ff_replay","synthetic":false,"types":[]},{"text":"impl Clone for ff_trigger","synthetic":false,"types":[]},{"text":"impl Clone for ff_envelope","synthetic":false,"types":[]},{"text":"impl Clone for ff_constant_effect","synthetic":false,"types":[]},{"text":"impl Clone for ff_ramp_effect","synthetic":false,"types":[]},{"text":"impl Clone for ff_condition_effect","synthetic":false,"types":[]},{"text":"impl Clone for ff_periodic_effect","synthetic":false,"types":[]},{"text":"impl Clone for ff_rumble_effect","synthetic":false,"types":[]},{"text":"impl Clone for ff_effect","synthetic":false,"types":[]},{"text":"impl Clone for dl_phdr_info","synthetic":false,"types":[]},{"text":"impl Clone for Elf32_Ehdr","synthetic":false,"types":[]},{"text":"impl Clone for Elf64_Ehdr","synthetic":false,"types":[]},{"text":"impl Clone for Elf32_Sym","synthetic":false,"types":[]},{"text":"impl Clone for Elf64_Sym","synthetic":false,"types":[]},{"text":"impl Clone for Elf32_Phdr","synthetic":false,"types":[]},{"text":"impl Clone for Elf64_Phdr","synthetic":false,"types":[]},{"text":"impl Clone for Elf32_Shdr","synthetic":false,"types":[]},{"text":"impl Clone for Elf64_Shdr","synthetic":false,"types":[]},{"text":"impl Clone for Elf32_Chdr","synthetic":false,"types":[]},{"text":"impl Clone for Elf64_Chdr","synthetic":false,"types":[]},{"text":"impl Clone for ucred","synthetic":false,"types":[]},{"text":"impl Clone for mntent","synthetic":false,"types":[]},{"text":"impl Clone for posix_spawn_file_actions_t","synthetic":false,"types":[]},{"text":"impl Clone for posix_spawnattr_t","synthetic":false,"types":[]},{"text":"impl Clone for genlmsghdr","synthetic":false,"types":[]},{"text":"impl Clone for in6_pktinfo","synthetic":false,"types":[]},{"text":"impl Clone for arpd_request","synthetic":false,"types":[]},{"text":"impl Clone for inotify_event","synthetic":false,"types":[]},{"text":"impl Clone for fanotify_response","synthetic":false,"types":[]},{"text":"impl Clone for sockaddr_vm","synthetic":false,"types":[]},{"text":"impl Clone for regmatch_t","synthetic":false,"types":[]},{"text":"impl Clone for sock_extended_err","synthetic":false,"types":[]},{"text":"impl Clone for sockaddr_nl","synthetic":false,"types":[]},{"text":"impl Clone for dirent","synthetic":false,"types":[]},{"text":"impl Clone for dirent64","synthetic":false,"types":[]},{"text":"impl Clone for sockaddr_alg","synthetic":false,"types":[]},{"text":"impl Clone for af_alg_iv","synthetic":false,"types":[]},{"text":"impl Clone for mq_attr","synthetic":false,"types":[]},{"text":"impl Clone for statx","synthetic":false,"types":[]},{"text":"impl Clone for statx_timestamp","synthetic":false,"types":[]},{"text":"impl Clone for aiocb","synthetic":false,"types":[]},{"text":"impl Clone for __exit_status","synthetic":false,"types":[]},{"text":"impl Clone for __timeval","synthetic":false,"types":[]},{"text":"impl Clone for glob64_t","synthetic":false,"types":[]},{"text":"impl Clone for msghdr","synthetic":false,"types":[]},{"text":"impl Clone for cmsghdr","synthetic":false,"types":[]},{"text":"impl Clone for termios","synthetic":false,"types":[]},{"text":"impl Clone for mallinfo","synthetic":false,"types":[]},{"text":"impl Clone for nlmsghdr","synthetic":false,"types":[]},{"text":"impl Clone for nlmsgerr","synthetic":false,"types":[]},{"text":"impl Clone for nl_pktinfo","synthetic":false,"types":[]},{"text":"impl Clone for nl_mmap_req","synthetic":false,"types":[]},{"text":"impl Clone for nl_mmap_hdr","synthetic":false,"types":[]},{"text":"impl Clone for nlattr","synthetic":false,"types":[]},{"text":"impl Clone for rtentry","synthetic":false,"types":[]},{"text":"impl Clone for timex","synthetic":false,"types":[]},{"text":"impl Clone for ntptimeval","synthetic":false,"types":[]},{"text":"impl Clone for regex_t","synthetic":false,"types":[]},{"text":"impl Clone for utmpx","synthetic":false,"types":[]},{"text":"impl Clone for sigset_t","synthetic":false,"types":[]},{"text":"impl Clone for sysinfo","synthetic":false,"types":[]},{"text":"impl Clone for msqid_ds","synthetic":false,"types":[]},{"text":"impl Clone for sigaction","synthetic":false,"types":[]},{"text":"impl Clone for statfs","synthetic":false,"types":[]},{"text":"impl Clone for flock","synthetic":false,"types":[]},{"text":"impl Clone for flock64","synthetic":false,"types":[]},{"text":"impl Clone for siginfo_t","synthetic":false,"types":[]},{"text":"impl Clone for stack_t","synthetic":false,"types":[]},{"text":"impl Clone for stat","synthetic":false,"types":[]},{"text":"impl Clone for stat64","synthetic":false,"types":[]},{"text":"impl Clone for statfs64","synthetic":false,"types":[]},{"text":"impl Clone for statvfs64","synthetic":false,"types":[]},{"text":"impl Clone for pthread_attr_t","synthetic":false,"types":[]},{"text":"impl Clone for _libc_fpxreg","synthetic":false,"types":[]},{"text":"impl Clone for _libc_xmmreg","synthetic":false,"types":[]},{"text":"impl Clone for _libc_fpstate","synthetic":false,"types":[]},{"text":"impl Clone for user_regs_struct","synthetic":false,"types":[]},{"text":"impl Clone for user","synthetic":false,"types":[]},{"text":"impl Clone for mcontext_t","synthetic":false,"types":[]},{"text":"impl Clone for ipc_perm","synthetic":false,"types":[]},{"text":"impl Clone for shmid_ds","synthetic":false,"types":[]},{"text":"impl Clone for termios2","synthetic":false,"types":[]},{"text":"impl Clone for ip_mreqn","synthetic":false,"types":[]},{"text":"impl Clone for user_fpregs_struct","synthetic":false,"types":[]},{"text":"impl Clone for ucontext_t","synthetic":false,"types":[]},{"text":"impl Clone for statvfs","synthetic":false,"types":[]},{"text":"impl Clone for max_align_t","synthetic":false,"types":[]},{"text":"impl Clone for sem_t","synthetic":false,"types":[]},{"text":"impl Clone for pthread_mutexattr_t","synthetic":false,"types":[]},{"text":"impl Clone for pthread_rwlockattr_t","synthetic":false,"types":[]},{"text":"impl Clone for pthread_condattr_t","synthetic":false,"types":[]},{"text":"impl Clone for fanotify_event_metadata","synthetic":false,"types":[]},{"text":"impl Clone for pthread_cond_t","synthetic":false,"types":[]},{"text":"impl Clone for pthread_mutex_t","synthetic":false,"types":[]},{"text":"impl Clone for pthread_rwlock_t","synthetic":false,"types":[]},{"text":"impl Clone for in6_addr","synthetic":false,"types":[]}];
implementors["linked_hash_map"] = [{"text":"impl&lt;K:&nbsp;Hash + Eq + Clone, V:&nbsp;Clone, S:&nbsp;BuildHasher + Clone&gt; Clone for LinkedHashMap&lt;K, V, S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, K, V&gt; Clone for Iter&lt;'a, K, V&gt;","synthetic":false,"types":[]},{"text":"impl&lt;K, V&gt; Clone for IntoIter&lt;K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Clone,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, K, V&gt; Clone for Keys&lt;'a, K, V&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, K, V&gt; Clone for Values&lt;'a, K, V&gt;","synthetic":false,"types":[]}];
implementors["log"] = [{"text":"impl Clone for Level","synthetic":false,"types":[]},{"text":"impl Clone for LevelFilter","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for Record&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for Metadata&lt;'a&gt;","synthetic":false,"types":[]}];
implementors["mime"] = [{"text":"impl Clone for Mime","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for Name&lt;'a&gt;","synthetic":false,"types":[]}];
implementors["mime_guess"] = [{"text":"impl Clone for MimeGuess","synthetic":false,"types":[]},{"text":"impl Clone for Iter","synthetic":false,"types":[]},{"text":"impl Clone for IterRaw","synthetic":false,"types":[]}];
implementors["miniz_oxide"] = [{"text":"impl Clone for CompressionStrategy","synthetic":false,"types":[]},{"text":"impl Clone for TDEFLFlush","synthetic":false,"types":[]},{"text":"impl Clone for TDEFLStatus","synthetic":false,"types":[]},{"text":"impl Clone for CompressionLevel","synthetic":false,"types":[]},{"text":"impl Clone for TINFLStatus","synthetic":false,"types":[]},{"text":"impl Clone for MZFlush","synthetic":false,"types":[]},{"text":"impl Clone for MZStatus","synthetic":false,"types":[]},{"text":"impl Clone for MZError","synthetic":false,"types":[]},{"text":"impl Clone for DataFormat","synthetic":false,"types":[]},{"text":"impl Clone for StreamResult","synthetic":false,"types":[]}];
implementors["minreq"] = [{"text":"impl Clone for Method","synthetic":false,"types":[]},{"text":"impl Clone for Request","synthetic":false,"types":[]},{"text":"impl Clone for Response","synthetic":false,"types":[]}];
implementors["mio"] = [{"text":"impl Clone for PollOpt","synthetic":false,"types":[]},{"text":"impl Clone for Ready","synthetic":false,"types":[]},{"text":"impl Clone for Event","synthetic":false,"types":[]},{"text":"impl Clone for SetReadiness","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for Iter&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl Clone for UnixReady","synthetic":false,"types":[]},{"text":"impl Clone for Token","synthetic":false,"types":[]}];
implementors["native_tls"] = [{"text":"impl Clone for Identity","synthetic":false,"types":[]},{"text":"impl Clone for Certificate","synthetic":false,"types":[]},{"text":"impl Clone for Protocol","synthetic":false,"types":[]},{"text":"impl Clone for TlsConnector","synthetic":false,"types":[]},{"text":"impl Clone for TlsAcceptor","synthetic":false,"types":[]}];
implementors["nix"] = [{"text":"impl Clone for Dir","synthetic":false,"types":[]},{"text":"impl Clone for Entry","synthetic":false,"types":[]},{"text":"impl Clone for Type","synthetic":false,"types":[]},{"text":"impl Clone for Errno","synthetic":false,"types":[]},{"text":"impl Clone for AtFlags","synthetic":false,"types":[]},{"text":"impl Clone for OFlag","synthetic":false,"types":[]},{"text":"impl Clone for SealFlag","synthetic":false,"types":[]},{"text":"impl Clone for FdFlag","synthetic":false,"types":[]},{"text":"impl Clone for FlockArg","synthetic":false,"types":[]},{"text":"impl Clone for SpliceFFlags","synthetic":false,"types":[]},{"text":"impl Clone for FallocateFlags","synthetic":false,"types":[]},{"text":"impl Clone for PosixFadviseAdvice","synthetic":false,"types":[]},{"text":"impl Clone for InterfaceAddress","synthetic":false,"types":[]},{"text":"impl Clone for ModuleInitFlags","synthetic":false,"types":[]},{"text":"impl Clone for DeleteModuleFlags","synthetic":false,"types":[]},{"text":"impl Clone for MsFlags","synthetic":false,"types":[]},{"text":"impl Clone for MntFlags","synthetic":false,"types":[]},{"text":"impl Clone for MQ_OFlag","synthetic":false,"types":[]},{"text":"impl Clone for FdFlag","synthetic":false,"types":[]},{"text":"impl Clone for MqAttr","synthetic":false,"types":[]},{"text":"impl Clone for InterfaceFlags","synthetic":false,"types":[]},{"text":"impl Clone for PollFd","synthetic":false,"types":[]},{"text":"impl Clone for PollFlags","synthetic":false,"types":[]},{"text":"impl Clone for OpenptyResult","synthetic":false,"types":[]},{"text":"impl Clone for ForkptyResult","synthetic":false,"types":[]},{"text":"impl Clone for PtyMaster","synthetic":false,"types":[]},{"text":"impl Clone for CloneFlags","synthetic":false,"types":[]},{"text":"impl Clone for CpuSet","synthetic":false,"types":[]},{"text":"impl Clone for AioFsyncMode","synthetic":false,"types":[]},{"text":"impl Clone for LioOpcode","synthetic":false,"types":[]},{"text":"impl Clone for LioMode","synthetic":false,"types":[]},{"text":"impl Clone for AioCancelStat","synthetic":false,"types":[]},{"text":"impl Clone for EpollFlags","synthetic":false,"types":[]},{"text":"impl Clone for EpollOp","synthetic":false,"types":[]},{"text":"impl Clone for EpollCreateFlags","synthetic":false,"types":[]},{"text":"impl Clone for EpollEvent","synthetic":false,"types":[]},{"text":"impl Clone for EfdFlags","synthetic":false,"types":[]},{"text":"impl Clone for MemFdCreateFlag","synthetic":false,"types":[]},{"text":"impl Clone for ProtFlags","synthetic":false,"types":[]},{"text":"impl Clone for MapFlags","synthetic":false,"types":[]},{"text":"impl Clone for MmapAdvise","synthetic":false,"types":[]},{"text":"impl Clone for MsFlags","synthetic":false,"types":[]},{"text":"impl Clone for MlockAllFlags","synthetic":false,"types":[]},{"text":"impl Clone for Request","synthetic":false,"types":[]},{"text":"impl Clone for Event","synthetic":false,"types":[]},{"text":"impl Clone for Options","synthetic":false,"types":[]},{"text":"impl Clone for QuotaType","synthetic":false,"types":[]},{"text":"impl Clone for QuotaFmt","synthetic":false,"types":[]},{"text":"impl Clone for QuotaValidFlags","synthetic":false,"types":[]},{"text":"impl Clone for Dqblk","synthetic":false,"types":[]},{"text":"impl Clone for RebootMode","synthetic":false,"types":[]},{"text":"impl Clone for FdSet","synthetic":false,"types":[]},{"text":"impl Clone for Signal","synthetic":false,"types":[]},{"text":"impl Clone for SignalIterator","synthetic":false,"types":[]},{"text":"impl Clone for SaFlags","synthetic":false,"types":[]},{"text":"impl Clone for SigmaskHow","synthetic":false,"types":[]},{"text":"impl Clone for SigSet","synthetic":false,"types":[]},{"text":"impl Clone for SigHandler","synthetic":false,"types":[]},{"text":"impl Clone for SigAction","synthetic":false,"types":[]},{"text":"impl Clone for SigevNotify","synthetic":false,"types":[]},{"text":"impl Clone for SigEvent","synthetic":false,"types":[]},{"text":"impl Clone for SfdFlags","synthetic":false,"types":[]},{"text":"impl Clone for SignalFd","synthetic":false,"types":[]},{"text":"impl Clone for AddressFamily","synthetic":false,"types":[]},{"text":"impl Clone for InetAddr","synthetic":false,"types":[]},{"text":"impl Clone for IpAddr","synthetic":false,"types":[]},{"text":"impl Clone for Ipv4Addr","synthetic":false,"types":[]},{"text":"impl Clone for Ipv6Addr","synthetic":false,"types":[]},{"text":"impl Clone for UnixAddr","synthetic":false,"types":[]},{"text":"impl Clone for SockAddr","synthetic":false,"types":[]},{"text":"impl Clone for NetlinkAddr","synthetic":false,"types":[]},{"text":"impl Clone for AlgAddr","synthetic":false,"types":[]},{"text":"impl Clone for LinkAddr","synthetic":false,"types":[]},{"text":"impl Clone for VsockAddr","synthetic":false,"types":[]},{"text":"impl Clone for ReuseAddr","synthetic":false,"types":[]},{"text":"impl Clone for ReusePort","synthetic":false,"types":[]},{"text":"impl Clone for TcpNoDelay","synthetic":false,"types":[]},{"text":"impl Clone for Linger","synthetic":false,"types":[]},{"text":"impl Clone for IpAddMembership","synthetic":false,"types":[]},{"text":"impl Clone for IpDropMembership","synthetic":false,"types":[]},{"text":"impl Clone for Ipv6AddMembership","synthetic":false,"types":[]},{"text":"impl Clone for Ipv6DropMembership","synthetic":false,"types":[]},{"text":"impl Clone for IpMulticastTtl","synthetic":false,"types":[]},{"text":"impl Clone for IpMulticastLoop","synthetic":false,"types":[]},{"text":"impl Clone for ReceiveTimeout","synthetic":false,"types":[]},{"text":"impl Clone for SendTimeout","synthetic":false,"types":[]},{"text":"impl Clone for Broadcast","synthetic":false,"types":[]},{"text":"impl Clone for OobInline","synthetic":false,"types":[]},{"text":"impl Clone for SocketError","synthetic":false,"types":[]},{"text":"impl Clone for KeepAlive","synthetic":false,"types":[]},{"text":"impl Clone for PeerCredentials","synthetic":false,"types":[]},{"text":"impl Clone for TcpKeepIdle","synthetic":false,"types":[]},{"text":"impl Clone for RcvBuf","synthetic":false,"types":[]},{"text":"impl Clone for SndBuf","synthetic":false,"types":[]},{"text":"impl Clone for RcvBufForce","synthetic":false,"types":[]},{"text":"impl Clone for SndBufForce","synthetic":false,"types":[]},{"text":"impl Clone for SockType","synthetic":false,"types":[]},{"text":"impl Clone for AcceptConn","synthetic":false,"types":[]},{"text":"impl Clone for BindToDevice","synthetic":false,"types":[]},{"text":"impl Clone for OriginalDst","synthetic":false,"types":[]},{"text":"impl Clone for ReceiveTimestamp","synthetic":false,"types":[]},{"text":"impl Clone for IpTransparent","synthetic":false,"types":[]},{"text":"impl Clone for Mark","synthetic":false,"types":[]},{"text":"impl Clone for PassCred","synthetic":false,"types":[]},{"text":"impl Clone for TcpCongestion","synthetic":false,"types":[]},{"text":"impl Clone for Ipv4PacketInfo","synthetic":false,"types":[]},{"text":"impl Clone for Ipv6RecvPacketInfo","synthetic":false,"types":[]},{"text":"impl Clone for UdpGsoSegment","synthetic":false,"types":[]},{"text":"impl Clone for UdpGroSegment","synthetic":false,"types":[]},{"text":"impl Clone for AlgSetAeadAuthSize","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for AlgSetKey&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Clone for SockType","synthetic":false,"types":[]},{"text":"impl Clone for SockProtocol","synthetic":false,"types":[]},{"text":"impl Clone for SockFlag","synthetic":false,"types":[]},{"text":"impl Clone for MsgFlags","synthetic":false,"types":[]},{"text":"impl Clone for UnixCredentials","synthetic":false,"types":[]},{"text":"impl Clone for IpMembershipRequest","synthetic":false,"types":[]},{"text":"impl Clone for Ipv6MembershipRequest","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for RecvMsg&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for CmsgIterator&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl Clone for ControlMessageOwned","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for ControlMessage&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl Clone for SockLevel","synthetic":false,"types":[]},{"text":"impl Clone for Shutdown","synthetic":false,"types":[]},{"text":"impl Clone for SFlag","synthetic":false,"types":[]},{"text":"impl Clone for Mode","synthetic":false,"types":[]},{"text":"impl Clone for FchmodatFlags","synthetic":false,"types":[]},{"text":"impl Clone for UtimensatFlags","synthetic":false,"types":[]},{"text":"impl Clone for Statfs","synthetic":false,"types":[]},{"text":"impl Clone for FsType","synthetic":false,"types":[]},{"text":"impl Clone for FsFlags","synthetic":false,"types":[]},{"text":"impl Clone for Statvfs","synthetic":false,"types":[]},{"text":"impl Clone for SysInfo","synthetic":false,"types":[]},{"text":"impl Clone for Termios","synthetic":false,"types":[]},{"text":"impl Clone for BaudRate","synthetic":false,"types":[]},{"text":"impl Clone for SetArg","synthetic":false,"types":[]},{"text":"impl Clone for FlushArg","synthetic":false,"types":[]},{"text":"impl Clone for FlowArg","synthetic":false,"types":[]},{"text":"impl Clone for SpecialCharacterIndices","synthetic":false,"types":[]},{"text":"impl Clone for InputFlags","synthetic":false,"types":[]},{"text":"impl Clone for OutputFlags","synthetic":false,"types":[]},{"text":"impl Clone for ControlFlags","synthetic":false,"types":[]},{"text":"impl Clone for LocalFlags","synthetic":false,"types":[]},{"text":"impl Clone for TimeSpec","synthetic":false,"types":[]},{"text":"impl Clone for TimeVal","synthetic":false,"types":[]},{"text":"impl Clone for RemoteIoVec","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for IoVec&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Clone for UtsName","synthetic":false,"types":[]},{"text":"impl Clone for WaitPidFlag","synthetic":false,"types":[]},{"text":"impl Clone for WaitStatus","synthetic":false,"types":[]},{"text":"impl Clone for AddWatchFlags","synthetic":false,"types":[]},{"text":"impl Clone for InitFlags","synthetic":false,"types":[]},{"text":"impl Clone for Inotify","synthetic":false,"types":[]},{"text":"impl Clone for WatchDescriptor","synthetic":false,"types":[]},{"text":"impl Clone for TimerFd","synthetic":false,"types":[]},{"text":"impl Clone for ClockId","synthetic":false,"types":[]},{"text":"impl Clone for TimerFlags","synthetic":false,"types":[]},{"text":"impl Clone for TimerSetTimeFlags","synthetic":false,"types":[]},{"text":"impl Clone for Expiration","synthetic":false,"types":[]},{"text":"impl Clone for UContext","synthetic":false,"types":[]},{"text":"impl Clone for Uid","synthetic":false,"types":[]},{"text":"impl Clone for Gid","synthetic":false,"types":[]},{"text":"impl Clone for Pid","synthetic":false,"types":[]},{"text":"impl Clone for ForkResult","synthetic":false,"types":[]},{"text":"impl Clone for FchownatFlags","synthetic":false,"types":[]},{"text":"impl Clone for Whence","synthetic":false,"types":[]},{"text":"impl Clone for LinkatFlags","synthetic":false,"types":[]},{"text":"impl Clone for UnlinkatFlags","synthetic":false,"types":[]},{"text":"impl Clone for PathconfVar","synthetic":false,"types":[]},{"text":"impl Clone for SysconfVar","synthetic":false,"types":[]},{"text":"impl Clone for AccessFlags","synthetic":false,"types":[]},{"text":"impl Clone for User","synthetic":false,"types":[]},{"text":"impl Clone for Group","synthetic":false,"types":[]},{"text":"impl Clone for Error","synthetic":false,"types":[]}];
implementors["num_complex"] = [{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for Complex&lt;T&gt;","synthetic":false,"types":[]}];
implementors["num_integer"] = [{"text":"impl&lt;A:&nbsp;Clone&gt; Clone for ExtendedGcd&lt;A&gt;","synthetic":false,"types":[]}];
implementors["num_iter"] = [{"text":"impl&lt;A:&nbsp;Clone&gt; Clone for Range&lt;A&gt;","synthetic":false,"types":[]},{"text":"impl&lt;A:&nbsp;Clone&gt; Clone for RangeInclusive&lt;A&gt;","synthetic":false,"types":[]},{"text":"impl&lt;A:&nbsp;Clone&gt; Clone for RangeStep&lt;A&gt;","synthetic":false,"types":[]},{"text":"impl&lt;A:&nbsp;Clone&gt; Clone for RangeStepInclusive&lt;A&gt;","synthetic":false,"types":[]},{"text":"impl&lt;A:&nbsp;Clone&gt; Clone for RangeFrom&lt;A&gt;","synthetic":false,"types":[]},{"text":"impl&lt;A:&nbsp;Clone&gt; Clone for RangeStepFrom&lt;A&gt;","synthetic":false,"types":[]}];
implementors["num_rational"] = [{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for Ratio&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Clone for ParseRatioError","synthetic":false,"types":[]}];
implementors["object"] = [{"text":"impl Clone for Architecture","synthetic":false,"types":[]},{"text":"impl Clone for AddressSize","synthetic":false,"types":[]},{"text":"impl Clone for BinaryFormat","synthetic":false,"types":[]},{"text":"impl Clone for SectionKind","synthetic":false,"types":[]},{"text":"impl Clone for ComdatKind","synthetic":false,"types":[]},{"text":"impl Clone for SymbolKind","synthetic":false,"types":[]},{"text":"impl Clone for SymbolScope","synthetic":false,"types":[]},{"text":"impl Clone for RelocationKind","synthetic":false,"types":[]},{"text":"impl Clone for RelocationEncoding","synthetic":false,"types":[]},{"text":"impl Clone for FileFlags","synthetic":false,"types":[]},{"text":"impl Clone for SectionFlags","synthetic":false,"types":[]},{"text":"impl&lt;Section:&nbsp;Clone&gt; Clone for SymbolFlags&lt;Section&gt;","synthetic":false,"types":[]},{"text":"impl Clone for Endianness","synthetic":false,"types":[]},{"text":"impl Clone for LittleEndian","synthetic":false,"types":[]},{"text":"impl Clone for BigEndian","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for U16Bytes&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for U32Bytes&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for U64Bytes&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for I16Bytes&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for I32Bytes&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for I64Bytes&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'data&gt; Clone for Bytes&lt;'data&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'data&gt; Clone for StringTable&lt;'data&gt;","synthetic":false,"types":[]},{"text":"impl Clone for ArchiveKind","synthetic":false,"types":[]},{"text":"impl&lt;'data&gt; Clone for SectionTable&lt;'data&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'data, 'file&gt; Clone for CoffSymbolTable&lt;'data, 'file&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;'data: 'file,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'data, 'file&gt; Clone for CoffSymbol&lt;'data, 'file&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;'data: 'file,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'data, Elf:&nbsp;Clone + FileHeader&gt; Clone for SectionTable&lt;'data, Elf&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Elf::SectionHeader: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'data, Elf:&nbsp;Clone + FileHeader&gt; Clone for SymbolTable&lt;'data, Elf&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Elf::Sym: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'data, 'file, Elf:&nbsp;Clone&gt; Clone for ElfSymbolTable&lt;'data, 'file, Elf&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;'data: 'file,<br>&nbsp;&nbsp;&nbsp;&nbsp;Elf: FileHeader,<br>&nbsp;&nbsp;&nbsp;&nbsp;Elf::Endian: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'data, 'file, Elf:&nbsp;Clone&gt; Clone for ElfSymbol&lt;'data, 'file, Elf&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;'data: 'file,<br>&nbsp;&nbsp;&nbsp;&nbsp;Elf: FileHeader,<br>&nbsp;&nbsp;&nbsp;&nbsp;Elf::Endian: Clone,<br>&nbsp;&nbsp;&nbsp;&nbsp;Elf::Sym: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'data, Mach:&nbsp;Clone + MachHeader&gt; Clone for SymbolTable&lt;'data, Mach&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Mach::Nlist: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'data, 'file, Mach:&nbsp;Clone + MachHeader&gt; Clone for MachOSymbolTable&lt;'data, 'file, Mach&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'data, 'file, Mach:&nbsp;Clone + MachHeader&gt; Clone for MachOSymbol&lt;'data, 'file, Mach&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Mach::Nlist: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl Clone for Error","synthetic":false,"types":[]},{"text":"impl Clone for SectionIndex","synthetic":false,"types":[]},{"text":"impl Clone for SymbolIndex","synthetic":false,"types":[]},{"text":"impl Clone for SymbolSection","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone + SymbolMapEntry&gt; Clone for SymbolMap&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'data&gt; Clone for SymbolMapName&lt;'data&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'data&gt; Clone for ObjectMap&lt;'data&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'data&gt; Clone for ObjectMapEntry&lt;'data&gt;","synthetic":false,"types":[]},{"text":"impl Clone for RelocationTarget","synthetic":false,"types":[]},{"text":"impl&lt;'data&gt; Clone for CompressedData&lt;'data&gt;","synthetic":false,"types":[]},{"text":"impl Clone for CompressionFormat","synthetic":false,"types":[]},{"text":"impl Clone for Header","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for FileHeader32&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for FileHeader64&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl Clone for Ident","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for SectionHeader32&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for SectionHeader64&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for CompressionHeader32&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for CompressionHeader64&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for Sym32&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for Sym64&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for Syminfo32&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for Syminfo64&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for Rel32&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for Rela32&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for Rel64&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for Rela64&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for ProgramHeader32&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for ProgramHeader64&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for Dyn32&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for Dyn64&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for NoteHeader32&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for NoteHeader64&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl Clone for FatHeader","synthetic":false,"types":[]},{"text":"impl Clone for FatArch32","synthetic":false,"types":[]},{"text":"impl Clone for FatArch64","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for MachHeader32&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for MachHeader64&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for LoadCommand&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for LcStr&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for SegmentCommand32&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for SegmentCommand64&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for Section32&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for Section64&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for Fvmlib&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for FvmlibCommand&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for Dylib&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for DylibCommand&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for SubFrameworkCommand&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for SubClientCommand&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for SubUmbrellaCommand&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for SubLibraryCommand&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for PreboundDylibCommand&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for DylinkerCommand&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for ThreadCommand&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for RoutinesCommand&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for RoutinesCommand_64&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for SymtabCommand&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for DysymtabCommand&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for DylibTableOfContents&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for DylibModule32&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for DylibModule64&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for DylibReference&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for TwolevelHintsCommand&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for TwolevelHint&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for PrebindCksumCommand&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for UuidCommand&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for RpathCommand&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for LinkeditDataCommand&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for EncryptionInfoCommand&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for EncryptionInfoCommand64&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for VersionMinCommand&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for BuildVersionCommand&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for BuildToolVersion&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for DyldInfoCommand&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for LinkerOptionCommand&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for SymSegCommand&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for IdentCommand&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for FvmfileCommand&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for EntryPointCommand&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for SourceVersionCommand&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for DataInCodeEntry&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for NoteCommand&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for Nlist32&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for Nlist64&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for Relocation&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl Clone for RelocationInfo","synthetic":false,"types":[]},{"text":"impl Clone for ScatteredRelocationInfo","synthetic":false,"types":[]},{"text":"impl Clone for ImageDosHeader","synthetic":false,"types":[]},{"text":"impl Clone for ImageOs2Header","synthetic":false,"types":[]},{"text":"impl Clone for ImageVxdHeader","synthetic":false,"types":[]},{"text":"impl Clone for ImageFileHeader","synthetic":false,"types":[]},{"text":"impl Clone for ImageDataDirectory","synthetic":false,"types":[]},{"text":"impl Clone for ImageOptionalHeader32","synthetic":false,"types":[]},{"text":"impl Clone for ImageRomOptionalHeader","synthetic":false,"types":[]},{"text":"impl Clone for ImageOptionalHeader64","synthetic":false,"types":[]},{"text":"impl Clone for ImageNtHeaders64","synthetic":false,"types":[]},{"text":"impl Clone for ImageNtHeaders32","synthetic":false,"types":[]},{"text":"impl Clone for ImageRomHeaders","synthetic":false,"types":[]},{"text":"impl Clone for Guid","synthetic":false,"types":[]},{"text":"impl Clone for AnonObjectHeader","synthetic":false,"types":[]},{"text":"impl Clone for AnonObjectHeaderV2","synthetic":false,"types":[]},{"text":"impl Clone for AnonObjectHeaderBigobj","synthetic":false,"types":[]},{"text":"impl Clone for ImageSectionHeader","synthetic":false,"types":[]},{"text":"impl Clone for ImageSymbol","synthetic":false,"types":[]},{"text":"impl Clone for ImageSymbolBytes","synthetic":false,"types":[]},{"text":"impl Clone for ImageSymbolEx","synthetic":false,"types":[]},{"text":"impl Clone for ImageSymbolExBytes","synthetic":false,"types":[]},{"text":"impl Clone for ImageAuxSymbolTokenDef","synthetic":false,"types":[]},{"text":"impl Clone for ImageAuxSymbolFunction","synthetic":false,"types":[]},{"text":"impl Clone for ImageAuxSymbolFunctionBeginEnd","synthetic":false,"types":[]},{"text":"impl Clone for ImageAuxSymbolWeak","synthetic":false,"types":[]},{"text":"impl Clone for ImageAuxSymbolSection","synthetic":false,"types":[]},{"text":"impl Clone for ImageAuxSymbolCrc","synthetic":false,"types":[]},{"text":"impl Clone for ImageRelocation","synthetic":false,"types":[]},{"text":"impl Clone for ImageLinenumber","synthetic":false,"types":[]},{"text":"impl Clone for ImageBaseRelocation","synthetic":false,"types":[]},{"text":"impl Clone for ImageArchiveMemberHeader","synthetic":false,"types":[]},{"text":"impl Clone for ImageExportDirectory","synthetic":false,"types":[]},{"text":"impl Clone for ImageImportByName","synthetic":false,"types":[]},{"text":"impl Clone for ImageTlsDirectory64","synthetic":false,"types":[]},{"text":"impl Clone for ImageTlsDirectory32","synthetic":false,"types":[]},{"text":"impl Clone for ImageImportDescriptor","synthetic":false,"types":[]},{"text":"impl Clone for ImageBoundImportDescriptor","synthetic":false,"types":[]},{"text":"impl Clone for ImageBoundForwarderRef","synthetic":false,"types":[]},{"text":"impl Clone for ImageDelayloadDescriptor","synthetic":false,"types":[]},{"text":"impl Clone for ImageResourceDirectory","synthetic":false,"types":[]},{"text":"impl Clone for ImageResourceDirectoryEntry","synthetic":false,"types":[]},{"text":"impl Clone for ImageResourceDirectoryString","synthetic":false,"types":[]},{"text":"impl Clone for ImageResourceDirStringU","synthetic":false,"types":[]},{"text":"impl Clone for ImageResourceDataEntry","synthetic":false,"types":[]},{"text":"impl Clone for ImageLoadConfigCodeIntegrity","synthetic":false,"types":[]},{"text":"impl Clone for ImageDynamicRelocationTable","synthetic":false,"types":[]},{"text":"impl Clone for ImageDynamicRelocation32","synthetic":false,"types":[]},{"text":"impl Clone for ImageDynamicRelocation64","synthetic":false,"types":[]},{"text":"impl Clone for ImageDynamicRelocation32V2","synthetic":false,"types":[]},{"text":"impl Clone for ImageDynamicRelocation64V2","synthetic":false,"types":[]},{"text":"impl Clone for ImagePrologueDynamicRelocationHeader","synthetic":false,"types":[]},{"text":"impl Clone for ImageEpilogueDynamicRelocationHeader","synthetic":false,"types":[]},{"text":"impl Clone for ImageLoadConfigDirectory32","synthetic":false,"types":[]},{"text":"impl Clone for ImageLoadConfigDirectory64","synthetic":false,"types":[]},{"text":"impl Clone for ImageHotPatchInfo","synthetic":false,"types":[]},{"text":"impl Clone for ImageHotPatchBase","synthetic":false,"types":[]},{"text":"impl Clone for ImageHotPatchHashes","synthetic":false,"types":[]},{"text":"impl Clone for ImageArmRuntimeFunctionEntry","synthetic":false,"types":[]},{"text":"impl Clone for ImageArm64RuntimeFunctionEntry","synthetic":false,"types":[]},{"text":"impl Clone for ImageAlpha64RuntimeFunctionEntry","synthetic":false,"types":[]},{"text":"impl Clone for ImageAlphaRuntimeFunctionEntry","synthetic":false,"types":[]},{"text":"impl Clone for ImageRuntimeFunctionEntry","synthetic":false,"types":[]},{"text":"impl Clone for ImageEnclaveConfig32","synthetic":false,"types":[]},{"text":"impl Clone for ImageEnclaveConfig64","synthetic":false,"types":[]},{"text":"impl Clone for ImageEnclaveImport","synthetic":false,"types":[]},{"text":"impl Clone for ImageDebugDirectory","synthetic":false,"types":[]},{"text":"impl Clone for ImageCoffSymbolsHeader","synthetic":false,"types":[]},{"text":"impl Clone for ImageDebugMisc","synthetic":false,"types":[]},{"text":"impl Clone for ImageFunctionEntry","synthetic":false,"types":[]},{"text":"impl Clone for ImageFunctionEntry64","synthetic":false,"types":[]},{"text":"impl Clone for ImageSeparateDebugHeader","synthetic":false,"types":[]},{"text":"impl Clone for NonPagedDebugInfo","synthetic":false,"types":[]},{"text":"impl Clone for ImageArchitectureEntry","synthetic":false,"types":[]},{"text":"impl Clone for ImportObjectHeader","synthetic":false,"types":[]},{"text":"impl Clone for ImageCor20Header","synthetic":false,"types":[]}];
implementors["once_cell"] = [{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for OnceCell&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for OnceCell&lt;T&gt;","synthetic":false,"types":[]}];
implementors["openssl"] = [{"text":"impl Clone for TimeDiff","synthetic":false,"types":[]},{"text":"impl Clone for CMSOptions","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Clone for Dsa&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Clone for PointConversionForm","synthetic":false,"types":[]},{"text":"impl Clone for Asn1Flag","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Clone for EcKey&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Clone for ErrorStack","synthetic":false,"types":[]},{"text":"impl Clone for Error","synthetic":false,"types":[]},{"text":"impl&lt;T, U&gt; Clone for Index&lt;T, U&gt;","synthetic":false,"types":[]},{"text":"impl Clone for MessageDigest","synthetic":false,"types":[]},{"text":"impl Clone for Hasher","synthetic":false,"types":[]},{"text":"impl Clone for DigestBytes","synthetic":false,"types":[]},{"text":"impl Clone for Nid","synthetic":false,"types":[]},{"text":"impl Clone for OcspFlag","synthetic":false,"types":[]},{"text":"impl Clone for OcspResponseStatus","synthetic":false,"types":[]},{"text":"impl Clone for OcspCertStatus","synthetic":false,"types":[]},{"text":"impl Clone for OcspRevokedStatus","synthetic":false,"types":[]},{"text":"impl Clone for KeyIvPair","synthetic":false,"types":[]},{"text":"impl Clone for Pkcs7Flags","synthetic":false,"types":[]},{"text":"impl Clone for Id","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Clone for PKey&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Clone for Padding","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Clone for Rsa&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Clone for Sha1","synthetic":false,"types":[]},{"text":"impl Clone for Sha224","synthetic":false,"types":[]},{"text":"impl Clone for Sha256","synthetic":false,"types":[]},{"text":"impl Clone for Sha384","synthetic":false,"types":[]},{"text":"impl Clone for Sha512","synthetic":false,"types":[]},{"text":"impl Clone for SrtpProfileId","synthetic":false,"types":[]},{"text":"impl Clone for SslConnector","synthetic":false,"types":[]},{"text":"impl Clone for SslAcceptor","synthetic":false,"types":[]},{"text":"impl Clone for ErrorCode","synthetic":false,"types":[]},{"text":"impl Clone for SslOptions","synthetic":false,"types":[]},{"text":"impl Clone for SslMode","synthetic":false,"types":[]},{"text":"impl Clone for SslMethod","synthetic":false,"types":[]},{"text":"impl Clone for SslVerifyMode","synthetic":false,"types":[]},{"text":"impl Clone for SslSessionCacheMode","synthetic":false,"types":[]},{"text":"impl Clone for ExtensionContext","synthetic":false,"types":[]},{"text":"impl Clone for SslFiletype","synthetic":false,"types":[]},{"text":"impl Clone for StatusType","synthetic":false,"types":[]},{"text":"impl Clone for NameType","synthetic":false,"types":[]},{"text":"impl Clone for SniError","synthetic":false,"types":[]},{"text":"impl Clone for SslAlert","synthetic":false,"types":[]},{"text":"impl Clone for AlpnError","synthetic":false,"types":[]},{"text":"impl Clone for ClientHelloResponse","synthetic":false,"types":[]},{"text":"impl Clone for SslVersion","synthetic":false,"types":[]},{"text":"impl Clone for SslContext","synthetic":false,"types":[]},{"text":"impl Clone for SslSession","synthetic":false,"types":[]},{"text":"impl Clone for ShutdownResult","synthetic":false,"types":[]},{"text":"impl Clone for ShutdownState","synthetic":false,"types":[]},{"text":"impl Clone for Mode","synthetic":false,"types":[]},{"text":"impl Clone for Cipher","synthetic":false,"types":[]},{"text":"impl Clone for X509CheckFlags","synthetic":false,"types":[]},{"text":"impl Clone for X509","synthetic":false,"types":[]},{"text":"impl Clone for X509VerifyResult","synthetic":false,"types":[]}];
implementors["openssl_sys"] = [{"text":"impl Clone for point_conversion_form_t","synthetic":false,"types":[]},{"text":"impl Clone for SHA_CTX","synthetic":false,"types":[]},{"text":"impl Clone for SHA256_CTX","synthetic":false,"types":[]},{"text":"impl Clone for SHA512_CTX","synthetic":false,"types":[]}];
implementors["percent_encoding"] = [{"text":"impl&lt;'a&gt; Clone for PercentEncode&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for PercentDecode&lt;'a&gt;","synthetic":false,"types":[]}];
implementors["privdrop"] = [{"text":"impl Clone for ErrorKind","synthetic":false,"types":[]},{"text":"impl Clone for PrivDrop","synthetic":false,"types":[]}];
implementors["proc_macro2"] = [{"text":"impl Clone for TokenStream","synthetic":false,"types":[]},{"text":"impl Clone for Span","synthetic":false,"types":[]},{"text":"impl Clone for TokenTree","synthetic":false,"types":[]},{"text":"impl Clone for Group","synthetic":false,"types":[]},{"text":"impl Clone for Delimiter","synthetic":false,"types":[]},{"text":"impl Clone for Punct","synthetic":false,"types":[]},{"text":"impl Clone for Spacing","synthetic":false,"types":[]},{"text":"impl Clone for Ident","synthetic":false,"types":[]},{"text":"impl Clone for Literal","synthetic":false,"types":[]},{"text":"impl Clone for IntoIter","synthetic":false,"types":[]}];
implementors["proc_macro_error"] = [{"text":"impl Clone for SpanRange","synthetic":false,"types":[]}];
implementors["regex"] = [{"text":"impl Clone for Error","synthetic":false,"types":[]},{"text":"impl&lt;'t&gt; Clone for Match&lt;'t&gt;","synthetic":false,"types":[]},{"text":"impl Clone for Regex","synthetic":false,"types":[]},{"text":"impl Clone for CaptureLocations","synthetic":false,"types":[]},{"text":"impl&lt;'c, 't: 'c&gt; Clone for SubCaptureMatches&lt;'c, 't&gt;","synthetic":false,"types":[]},{"text":"impl Clone for RegexSet","synthetic":false,"types":[]},{"text":"impl Clone for SetMatches","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for SetMatchesIter&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl Clone for RegexSet","synthetic":false,"types":[]},{"text":"impl Clone for SetMatches","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for SetMatchesIter&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'t&gt; Clone for Match&lt;'t&gt;","synthetic":false,"types":[]},{"text":"impl Clone for Regex","synthetic":false,"types":[]},{"text":"impl Clone for CaptureLocations","synthetic":false,"types":[]},{"text":"impl&lt;'c, 't: 'c&gt; Clone for SubCaptureMatches&lt;'c, 't&gt;","synthetic":false,"types":[]}];
implementors["regex_syntax"] = [{"text":"impl Clone for ParserBuilder","synthetic":false,"types":[]},{"text":"impl Clone for Parser","synthetic":false,"types":[]},{"text":"impl Clone for Error","synthetic":false,"types":[]},{"text":"impl Clone for ErrorKind","synthetic":false,"types":[]},{"text":"impl Clone for Span","synthetic":false,"types":[]},{"text":"impl Clone for Position","synthetic":false,"types":[]},{"text":"impl Clone for WithComments","synthetic":false,"types":[]},{"text":"impl Clone for Comment","synthetic":false,"types":[]},{"text":"impl Clone for Ast","synthetic":false,"types":[]},{"text":"impl Clone for Alternation","synthetic":false,"types":[]},{"text":"impl Clone for Concat","synthetic":false,"types":[]},{"text":"impl Clone for Literal","synthetic":false,"types":[]},{"text":"impl Clone for LiteralKind","synthetic":false,"types":[]},{"text":"impl Clone for SpecialLiteralKind","synthetic":false,"types":[]},{"text":"impl Clone for HexLiteralKind","synthetic":false,"types":[]},{"text":"impl Clone for Class","synthetic":false,"types":[]},{"text":"impl Clone for ClassPerl","synthetic":false,"types":[]},{"text":"impl Clone for ClassPerlKind","synthetic":false,"types":[]},{"text":"impl Clone for ClassAscii","synthetic":false,"types":[]},{"text":"impl Clone for ClassAsciiKind","synthetic":false,"types":[]},{"text":"impl Clone for ClassUnicode","synthetic":false,"types":[]},{"text":"impl Clone for ClassUnicodeKind","synthetic":false,"types":[]},{"text":"impl Clone for ClassUnicodeOpKind","synthetic":false,"types":[]},{"text":"impl Clone for ClassBracketed","synthetic":false,"types":[]},{"text":"impl Clone for ClassSet","synthetic":false,"types":[]},{"text":"impl Clone for ClassSetItem","synthetic":false,"types":[]},{"text":"impl Clone for ClassSetRange","synthetic":false,"types":[]},{"text":"impl Clone for ClassSetUnion","synthetic":false,"types":[]},{"text":"impl Clone for ClassSetBinaryOp","synthetic":false,"types":[]},{"text":"impl Clone for ClassSetBinaryOpKind","synthetic":false,"types":[]},{"text":"impl Clone for Assertion","synthetic":false,"types":[]},{"text":"impl Clone for AssertionKind","synthetic":false,"types":[]},{"text":"impl Clone for Repetition","synthetic":false,"types":[]},{"text":"impl Clone for RepetitionOp","synthetic":false,"types":[]},{"text":"impl Clone for RepetitionKind","synthetic":false,"types":[]},{"text":"impl Clone for RepetitionRange","synthetic":false,"types":[]},{"text":"impl Clone for Group","synthetic":false,"types":[]},{"text":"impl Clone for GroupKind","synthetic":false,"types":[]},{"text":"impl Clone for CaptureName","synthetic":false,"types":[]},{"text":"impl Clone for SetFlags","synthetic":false,"types":[]},{"text":"impl Clone for Flags","synthetic":false,"types":[]},{"text":"impl Clone for FlagsItem","synthetic":false,"types":[]},{"text":"impl Clone for FlagsItemKind","synthetic":false,"types":[]},{"text":"impl Clone for Flag","synthetic":false,"types":[]},{"text":"impl Clone for Error","synthetic":false,"types":[]},{"text":"impl Clone for Literals","synthetic":false,"types":[]},{"text":"impl Clone for Literal","synthetic":false,"types":[]},{"text":"impl Clone for TranslatorBuilder","synthetic":false,"types":[]},{"text":"impl Clone for Translator","synthetic":false,"types":[]},{"text":"impl Clone for Error","synthetic":false,"types":[]},{"text":"impl Clone for ErrorKind","synthetic":false,"types":[]},{"text":"impl Clone for Hir","synthetic":false,"types":[]},{"text":"impl Clone for HirKind","synthetic":false,"types":[]},{"text":"impl Clone for Literal","synthetic":false,"types":[]},{"text":"impl Clone for Class","synthetic":false,"types":[]},{"text":"impl Clone for ClassUnicode","synthetic":false,"types":[]},{"text":"impl Clone for ClassUnicodeRange","synthetic":false,"types":[]},{"text":"impl Clone for ClassBytes","synthetic":false,"types":[]},{"text":"impl Clone for ClassBytesRange","synthetic":false,"types":[]},{"text":"impl Clone for Anchor","synthetic":false,"types":[]},{"text":"impl Clone for WordBoundary","synthetic":false,"types":[]},{"text":"impl Clone for Group","synthetic":false,"types":[]},{"text":"impl Clone for GroupKind","synthetic":false,"types":[]},{"text":"impl Clone for Repetition","synthetic":false,"types":[]},{"text":"impl Clone for RepetitionKind","synthetic":false,"types":[]},{"text":"impl Clone for RepetitionRange","synthetic":false,"types":[]},{"text":"impl Clone for ParserBuilder","synthetic":false,"types":[]},{"text":"impl Clone for Parser","synthetic":false,"types":[]},{"text":"impl Clone for Utf8Sequence","synthetic":false,"types":[]},{"text":"impl Clone for Utf8Range","synthetic":false,"types":[]}];
implementors["reqwest"] = [{"text":"impl Clone for Client","synthetic":false,"types":[]},{"text":"impl Clone for Client","synthetic":false,"types":[]},{"text":"impl Clone for Proxy","synthetic":false,"types":[]},{"text":"impl Clone for Certificate","synthetic":false,"types":[]}];
implementors["rustc_demangle"] = [{"text":"impl Clone for TryDemangleError","synthetic":false,"types":[]}];
implementors["ryu"] = [{"text":"impl Clone for Buffer","synthetic":false,"types":[]}];
implementors["serde"] = [{"text":"impl Clone for Error","synthetic":false,"types":[]},{"text":"impl&lt;E&gt; Clone for UnitDeserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E&gt; Clone for BoolDeserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E&gt; Clone for I8Deserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E&gt; Clone for I16Deserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E&gt; Clone for I32Deserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E&gt; Clone for I64Deserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E&gt; Clone for IsizeDeserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E&gt; Clone for U8Deserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E&gt; Clone for U16Deserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E&gt; Clone for U64Deserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E&gt; Clone for UsizeDeserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E&gt; Clone for F32Deserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E&gt; Clone for F64Deserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E&gt; Clone for CharDeserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E&gt; Clone for I128Deserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E&gt; Clone for U128Deserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E&gt; Clone for U32Deserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'de, E&gt; Clone for StrDeserializer&lt;'de, E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'de, E&gt; Clone for BorrowedStrDeserializer&lt;'de, E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E&gt; Clone for StringDeserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, E&gt; Clone for CowStrDeserializer&lt;'a, E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'de, E&gt; Clone for BorrowedBytesDeserializer&lt;'de, E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone, E:&nbsp;Clone&gt; Clone for SeqDeserializer&lt;I, E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;A:&nbsp;Clone&gt; Clone for SeqAccessDeserializer&lt;A&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'de, I, E&gt; Clone for MapDeserializer&lt;'de, I, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Iterator + Clone,<br>&nbsp;&nbsp;&nbsp;&nbsp;I::Item: Pair,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I::Item as Pair&gt;::Second: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;A:&nbsp;Clone&gt; Clone for MapAccessDeserializer&lt;A&gt;","synthetic":false,"types":[]},{"text":"impl Clone for IgnoredAny","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for Unexpected&lt;'a&gt;","synthetic":false,"types":[]}];
implementors["serde_hjson"] = [{"text":"impl Clone for ErrorCode","synthetic":false,"types":[]},{"text":"impl Clone for Value","synthetic":false,"types":[]}];
implementors["serde_json"] = [{"text":"impl Clone for Category","synthetic":false,"types":[]},{"text":"impl Clone for Map&lt;String, Value&gt;","synthetic":false,"types":[]},{"text":"impl Clone for CompactFormatter","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for PrettyFormatter&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl Clone for Value","synthetic":false,"types":[]},{"text":"impl Clone for Number","synthetic":false,"types":[]}];
implementors["serde_path_to_error"] = [{"text":"impl Clone for Path","synthetic":false,"types":[]},{"text":"impl Clone for Segment","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone&gt; Clone for Error&lt;E&gt;","synthetic":false,"types":[]}];
implementors["serde_test"] = [{"text":"impl&lt;'a&gt; Clone for Token&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl Clone for Error","synthetic":false,"types":[]}];
implementors["serde_urlencoded"] = [{"text":"impl Clone for Error","synthetic":false,"types":[]}];
implementors["serde_yaml"] = [{"text":"impl Clone for Mapping","synthetic":false,"types":[]},{"text":"impl Clone for Number","synthetic":false,"types":[]},{"text":"impl Clone for Value","synthetic":false,"types":[]}];
implementors["signal_hook"] = [{"text":"impl Clone for Handle","synthetic":false,"types":[]},{"text":"impl Clone for SignalOnly","synthetic":false,"types":[]}];
implementors["signal_hook_registry"] = [{"text":"impl Clone for SigId","synthetic":false,"types":[]}];
implementors["slab"] = [{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for Slab&lt;T&gt;","synthetic":false,"types":[]}];
implementors["socket2"] = [{"text":"impl Clone for Domain","synthetic":false,"types":[]},{"text":"impl Clone for Type","synthetic":false,"types":[]},{"text":"impl Clone for Protocol","synthetic":false,"types":[]}];
implementors["spirit"] = [{"text":"impl Clone for InvalidFileType","synthetic":false,"types":[]},{"text":"impl Clone for MissingFile","synthetic":false,"types":[]},{"text":"impl Clone for Empty","synthetic":false,"types":[]},{"text":"impl Clone for ErrorLogFormat","synthetic":false,"types":[]},{"text":"impl Clone for Autojoin","synthetic":false,"types":[]},{"text":"impl Clone for CacheId","synthetic":false,"types":[]},{"text":"impl Clone for Trivial","synthetic":false,"types":[]},{"text":"impl Clone for IdMapping","synthetic":false,"types":[]},{"text":"impl Clone for NopTransformation","synthetic":false,"types":[]},{"text":"impl Clone for MissingEquals","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for Hidden&lt;T&gt;","synthetic":false,"types":[]}];
implementors["spirit_cfg_helpers"] = [{"text":"impl Clone for CfgDump","synthetic":false,"types":[]},{"text":"impl Clone for CfgHelp","synthetic":false,"types":[]},{"text":"impl Clone for Opts","synthetic":false,"types":[]}];
implementors["spirit_daemonize"] = [{"text":"impl Clone for Daemonize","synthetic":false,"types":[]},{"text":"impl Clone for SecId","synthetic":false,"types":[]},{"text":"impl Clone for Daemon","synthetic":false,"types":[]},{"text":"impl Clone for DaemonizeInstaller","synthetic":false,"types":[]},{"text":"impl Clone for Opts","synthetic":false,"types":[]},{"text":"impl Clone for UserDaemon","synthetic":false,"types":[]}];
implementors["spirit_dipstick"] = [{"text":"impl Clone for Config","synthetic":false,"types":[]},{"text":"impl Clone for Monitor","synthetic":false,"types":[]}];
implementors["spirit_hyper"] = [{"text":"impl Clone for HttpMode","synthetic":false,"types":[]},{"text":"impl Clone for HyperCfg","synthetic":false,"types":[]},{"text":"impl&lt;A:&nbsp;Clone&gt; Clone for Acceptor&lt;A&gt;","synthetic":false,"types":[]},{"text":"impl&lt;Transport:&nbsp;Clone&gt; Clone for HyperServer&lt;Transport&gt;","synthetic":false,"types":[]}];
implementors["spirit_log"] = [{"text":"impl Clone for OverflowMode","synthetic":false,"types":[]},{"text":"impl Clone for Background","synthetic":false,"types":[]},{"text":"impl Clone for Opts","synthetic":false,"types":[]},{"text":"impl Clone for SyslogError","synthetic":false,"types":[]},{"text":"impl Clone for Cfg","synthetic":false,"types":[]},{"text":"impl Clone for CfgAndOpts","synthetic":false,"types":[]},{"text":"impl Clone for LogInstaller","synthetic":false,"types":[]}];
implementors["spirit_reqwest"] = [{"text":"impl Clone for ReqwestClient","synthetic":false,"types":[]},{"text":"impl Clone for AtomicClient","synthetic":false,"types":[]},{"text":"impl Clone for AtomicClient","synthetic":false,"types":[]}];
implementors["spirit_tokio"] = [{"text":"impl&lt;A:&nbsp;Clone, B:&nbsp;Clone&gt; Clone for Either&lt;A, B&gt;","synthetic":false,"types":[]},{"text":"impl Clone for FutureInstaller","synthetic":false,"types":[]},{"text":"impl&lt;A:&nbsp;Clone, L:&nbsp;Clone&gt; Clone for WithListenLimits&lt;A, L&gt;","synthetic":false,"types":[]},{"text":"impl Clone for Limits","synthetic":false,"types":[]},{"text":"impl Clone for Listen","synthetic":false,"types":[]},{"text":"impl&lt;ExtraCfg:&nbsp;Clone, UnixStreamConfig:&nbsp;Clone&gt; Clone for UnixListen&lt;ExtraCfg, UnixStreamConfig&gt;","synthetic":false,"types":[]},{"text":"impl&lt;ExtraCfg:&nbsp;Clone&gt; Clone for DatagramListen&lt;ExtraCfg&gt;","synthetic":false,"types":[]},{"text":"impl Clone for MaybeDuration","synthetic":false,"types":[]},{"text":"impl Clone for Listen","synthetic":false,"types":[]},{"text":"impl Clone for TcpConfig","synthetic":false,"types":[]},{"text":"impl&lt;ExtraCfg:&nbsp;Clone, TcpStreamConfigure:&nbsp;Clone&gt; Clone for TcpListen&lt;ExtraCfg, TcpStreamConfigure&gt;","synthetic":false,"types":[]},{"text":"impl&lt;ExtraCfg:&nbsp;Clone&gt; Clone for UdpListen&lt;ExtraCfg&gt;","synthetic":false,"types":[]},{"text":"impl Clone for Config","synthetic":false,"types":[]}];
implementors["structdoc"] = [{"text":"impl Clone for Flags","synthetic":false,"types":[]},{"text":"impl Clone for Arity","synthetic":false,"types":[]},{"text":"impl Clone for Tagging","synthetic":false,"types":[]},{"text":"impl Clone for Field","synthetic":false,"types":[]},{"text":"impl Clone for Documentation","synthetic":false,"types":[]}];
implementors["syn"] = [{"text":"impl Clone for Underscore","synthetic":false,"types":[]},{"text":"impl Clone for Abstract","synthetic":false,"types":[]},{"text":"impl Clone for As","synthetic":false,"types":[]},{"text":"impl Clone for Async","synthetic":false,"types":[]},{"text":"impl Clone for Auto","synthetic":false,"types":[]},{"text":"impl Clone for Await","synthetic":false,"types":[]},{"text":"impl Clone for Become","synthetic":false,"types":[]},{"text":"impl Clone for Box","synthetic":false,"types":[]},{"text":"impl Clone for Break","synthetic":false,"types":[]},{"text":"impl Clone for Const","synthetic":false,"types":[]},{"text":"impl Clone for Continue","synthetic":false,"types":[]},{"text":"impl Clone for Crate","synthetic":false,"types":[]},{"text":"impl Clone for Default","synthetic":false,"types":[]},{"text":"impl Clone for Do","synthetic":false,"types":[]},{"text":"impl Clone for Dyn","synthetic":false,"types":[]},{"text":"impl Clone for Else","synthetic":false,"types":[]},{"text":"impl Clone for Enum","synthetic":false,"types":[]},{"text":"impl Clone for Extern","synthetic":false,"types":[]},{"text":"impl Clone for Final","synthetic":false,"types":[]},{"text":"impl Clone for Fn","synthetic":false,"types":[]},{"text":"impl Clone for For","synthetic":false,"types":[]},{"text":"impl Clone for If","synthetic":false,"types":[]},{"text":"impl Clone for Impl","synthetic":false,"types":[]},{"text":"impl Clone for In","synthetic":false,"types":[]},{"text":"impl Clone for Let","synthetic":false,"types":[]},{"text":"impl Clone for Loop","synthetic":false,"types":[]},{"text":"impl Clone for Macro","synthetic":false,"types":[]},{"text":"impl Clone for Match","synthetic":false,"types":[]},{"text":"impl Clone for Mod","synthetic":false,"types":[]},{"text":"impl Clone for Move","synthetic":false,"types":[]},{"text":"impl Clone for Mut","synthetic":false,"types":[]},{"text":"impl Clone for Override","synthetic":false,"types":[]},{"text":"impl Clone for Priv","synthetic":false,"types":[]},{"text":"impl Clone for Pub","synthetic":false,"types":[]},{"text":"impl Clone for Ref","synthetic":false,"types":[]},{"text":"impl Clone for Return","synthetic":false,"types":[]},{"text":"impl Clone for SelfType","synthetic":false,"types":[]},{"text":"impl Clone for SelfValue","synthetic":false,"types":[]},{"text":"impl Clone for Static","synthetic":false,"types":[]},{"text":"impl Clone for Struct","synthetic":false,"types":[]},{"text":"impl Clone for Super","synthetic":false,"types":[]},{"text":"impl Clone for Trait","synthetic":false,"types":[]},{"text":"impl Clone for Try","synthetic":false,"types":[]},{"text":"impl Clone for Type","synthetic":false,"types":[]},{"text":"impl Clone for Typeof","synthetic":false,"types":[]},{"text":"impl Clone for Union","synthetic":false,"types":[]},{"text":"impl Clone for Unsafe","synthetic":false,"types":[]},{"text":"impl Clone for Unsized","synthetic":false,"types":[]},{"text":"impl Clone for Use","synthetic":false,"types":[]},{"text":"impl Clone for Virtual","synthetic":false,"types":[]},{"text":"impl Clone for Where","synthetic":false,"types":[]},{"text":"impl Clone for While","synthetic":false,"types":[]},{"text":"impl Clone for Yield","synthetic":false,"types":[]},{"text":"impl Clone for Add","synthetic":false,"types":[]},{"text":"impl Clone for AddEq","synthetic":false,"types":[]},{"text":"impl Clone for And","synthetic":false,"types":[]},{"text":"impl Clone for AndAnd","synthetic":false,"types":[]},{"text":"impl Clone for AndEq","synthetic":false,"types":[]},{"text":"impl Clone for At","synthetic":false,"types":[]},{"text":"impl Clone for Bang","synthetic":false,"types":[]},{"text":"impl Clone for Caret","synthetic":false,"types":[]},{"text":"impl Clone for CaretEq","synthetic":false,"types":[]},{"text":"impl Clone for Colon","synthetic":false,"types":[]},{"text":"impl Clone for Colon2","synthetic":false,"types":[]},{"text":"impl Clone for Comma","synthetic":false,"types":[]},{"text":"impl Clone for Div","synthetic":false,"types":[]},{"text":"impl Clone for DivEq","synthetic":false,"types":[]},{"text":"impl Clone for Dollar","synthetic":false,"types":[]},{"text":"impl Clone for Dot","synthetic":false,"types":[]},{"text":"impl Clone for Dot2","synthetic":false,"types":[]},{"text":"impl Clone for Dot3","synthetic":false,"types":[]},{"text":"impl Clone for DotDotEq","synthetic":false,"types":[]},{"text":"impl Clone for Eq","synthetic":false,"types":[]},{"text":"impl Clone for EqEq","synthetic":false,"types":[]},{"text":"impl Clone for Ge","synthetic":false,"types":[]},{"text":"impl Clone for Gt","synthetic":false,"types":[]},{"text":"impl Clone for Le","synthetic":false,"types":[]},{"text":"impl Clone for Lt","synthetic":false,"types":[]},{"text":"impl Clone for MulEq","synthetic":false,"types":[]},{"text":"impl Clone for Ne","synthetic":false,"types":[]},{"text":"impl Clone for Or","synthetic":false,"types":[]},{"text":"impl Clone for OrEq","synthetic":false,"types":[]},{"text":"impl Clone for OrOr","synthetic":false,"types":[]},{"text":"impl Clone for Pound","synthetic":false,"types":[]},{"text":"impl Clone for Question","synthetic":false,"types":[]},{"text":"impl Clone for RArrow","synthetic":false,"types":[]},{"text":"impl Clone for LArrow","synthetic":false,"types":[]},{"text":"impl Clone for Rem","synthetic":false,"types":[]},{"text":"impl Clone for RemEq","synthetic":false,"types":[]},{"text":"impl Clone for FatArrow","synthetic":false,"types":[]},{"text":"impl Clone for Semi","synthetic":false,"types":[]},{"text":"impl Clone for Shl","synthetic":false,"types":[]},{"text":"impl Clone for ShlEq","synthetic":false,"types":[]},{"text":"impl Clone for Shr","synthetic":false,"types":[]},{"text":"impl Clone for ShrEq","synthetic":false,"types":[]},{"text":"impl Clone for Star","synthetic":false,"types":[]},{"text":"impl Clone for Sub","synthetic":false,"types":[]},{"text":"impl Clone for SubEq","synthetic":false,"types":[]},{"text":"impl Clone for Tilde","synthetic":false,"types":[]},{"text":"impl Clone for Brace","synthetic":false,"types":[]},{"text":"impl Clone for Bracket","synthetic":false,"types":[]},{"text":"impl Clone for Paren","synthetic":false,"types":[]},{"text":"impl Clone for Group","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for ImplGenerics&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for TypeGenerics&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for Turbofish&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl Clone for Lifetime","synthetic":false,"types":[]},{"text":"impl Clone for LitStr","synthetic":false,"types":[]},{"text":"impl Clone for LitByteStr","synthetic":false,"types":[]},{"text":"impl Clone for LitByte","synthetic":false,"types":[]},{"text":"impl Clone for LitChar","synthetic":false,"types":[]},{"text":"impl Clone for LitInt","synthetic":false,"types":[]},{"text":"impl Clone for LitFloat","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for Cursor&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T, P&gt; Clone for Punctuated&lt;T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Clone,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, T, P&gt; Clone for Pairs&lt;'a, T, P&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T, P&gt; Clone for IntoPairs&lt;T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Clone,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Clone for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, T&gt; Clone for Iter&lt;'a, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T, P&gt; Clone for Pair&lt;T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Clone,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl Clone for Abi","synthetic":false,"types":[]},{"text":"impl Clone for AngleBracketedGenericArguments","synthetic":false,"types":[]},{"text":"impl Clone for Arm","synthetic":false,"types":[]},{"text":"impl Clone for AttrStyle","synthetic":false,"types":[]},{"text":"impl Clone for Attribute","synthetic":false,"types":[]},{"text":"impl Clone for BareFnArg","synthetic":false,"types":[]},{"text":"impl Clone for BinOp","synthetic":false,"types":[]},{"text":"impl Clone for Binding","synthetic":false,"types":[]},{"text":"impl Clone for Block","synthetic":false,"types":[]},{"text":"impl Clone for BoundLifetimes","synthetic":false,"types":[]},{"text":"impl Clone for ConstParam","synthetic":false,"types":[]},{"text":"impl Clone for Constraint","synthetic":false,"types":[]},{"text":"impl Clone for Data","synthetic":false,"types":[]},{"text":"impl Clone for DataEnum","synthetic":false,"types":[]},{"text":"impl Clone for DataStruct","synthetic":false,"types":[]},{"text":"impl Clone for DataUnion","synthetic":false,"types":[]},{"text":"impl Clone for DeriveInput","synthetic":false,"types":[]},{"text":"impl Clone for Expr","synthetic":false,"types":[]},{"text":"impl Clone for ExprArray","synthetic":false,"types":[]},{"text":"impl Clone for ExprAssign","synthetic":false,"types":[]},{"text":"impl Clone for ExprAssignOp","synthetic":false,"types":[]},{"text":"impl Clone for ExprAsync","synthetic":false,"types":[]},{"text":"impl Clone for ExprAwait","synthetic":false,"types":[]},{"text":"impl Clone for ExprBinary","synthetic":false,"types":[]},{"text":"impl Clone for ExprBlock","synthetic":false,"types":[]},{"text":"impl Clone for ExprBox","synthetic":false,"types":[]},{"text":"impl Clone for ExprBreak","synthetic":false,"types":[]},{"text":"impl Clone for ExprCall","synthetic":false,"types":[]},{"text":"impl Clone for ExprCast","synthetic":false,"types":[]},{"text":"impl Clone for ExprClosure","synthetic":false,"types":[]},{"text":"impl Clone for ExprContinue","synthetic":false,"types":[]},{"text":"impl Clone for ExprField","synthetic":false,"types":[]},{"text":"impl Clone for ExprForLoop","synthetic":false,"types":[]},{"text":"impl Clone for ExprGroup","synthetic":false,"types":[]},{"text":"impl Clone for ExprIf","synthetic":false,"types":[]},{"text":"impl Clone for ExprIndex","synthetic":false,"types":[]},{"text":"impl Clone for ExprLet","synthetic":false,"types":[]},{"text":"impl Clone for ExprLit","synthetic":false,"types":[]},{"text":"impl Clone for ExprLoop","synthetic":false,"types":[]},{"text":"impl Clone for ExprMacro","synthetic":false,"types":[]},{"text":"impl Clone for ExprMatch","synthetic":false,"types":[]},{"text":"impl Clone for ExprMethodCall","synthetic":false,"types":[]},{"text":"impl Clone for ExprParen","synthetic":false,"types":[]},{"text":"impl Clone for ExprPath","synthetic":false,"types":[]},{"text":"impl Clone for ExprRange","synthetic":false,"types":[]},{"text":"impl Clone for ExprReference","synthetic":false,"types":[]},{"text":"impl Clone for ExprRepeat","synthetic":false,"types":[]},{"text":"impl Clone for ExprReturn","synthetic":false,"types":[]},{"text":"impl Clone for ExprStruct","synthetic":false,"types":[]},{"text":"impl Clone for ExprTry","synthetic":false,"types":[]},{"text":"impl Clone for ExprTryBlock","synthetic":false,"types":[]},{"text":"impl Clone for ExprTuple","synthetic":false,"types":[]},{"text":"impl Clone for ExprType","synthetic":false,"types":[]},{"text":"impl Clone for ExprUnary","synthetic":false,"types":[]},{"text":"impl Clone for ExprUnsafe","synthetic":false,"types":[]},{"text":"impl Clone for ExprWhile","synthetic":false,"types":[]},{"text":"impl Clone for ExprYield","synthetic":false,"types":[]},{"text":"impl Clone for Field","synthetic":false,"types":[]},{"text":"impl Clone for FieldPat","synthetic":false,"types":[]},{"text":"impl Clone for FieldValue","synthetic":false,"types":[]},{"text":"impl Clone for Fields","synthetic":false,"types":[]},{"text":"impl Clone for FieldsNamed","synthetic":false,"types":[]},{"text":"impl Clone for FieldsUnnamed","synthetic":false,"types":[]},{"text":"impl Clone for File","synthetic":false,"types":[]},{"text":"impl Clone for FnArg","synthetic":false,"types":[]},{"text":"impl Clone for ForeignItem","synthetic":false,"types":[]},{"text":"impl Clone for ForeignItemFn","synthetic":false,"types":[]},{"text":"impl Clone for ForeignItemMacro","synthetic":false,"types":[]},{"text":"impl Clone for ForeignItemStatic","synthetic":false,"types":[]},{"text":"impl Clone for ForeignItemType","synthetic":false,"types":[]},{"text":"impl Clone for GenericArgument","synthetic":false,"types":[]},{"text":"impl Clone for GenericMethodArgument","synthetic":false,"types":[]},{"text":"impl Clone for GenericParam","synthetic":false,"types":[]},{"text":"impl Clone for Generics","synthetic":false,"types":[]},{"text":"impl Clone for ImplItem","synthetic":false,"types":[]},{"text":"impl Clone for ImplItemConst","synthetic":false,"types":[]},{"text":"impl Clone for ImplItemMacro","synthetic":false,"types":[]},{"text":"impl Clone for ImplItemMethod","synthetic":false,"types":[]},{"text":"impl Clone for ImplItemType","synthetic":false,"types":[]},{"text":"impl Clone for Index","synthetic":false,"types":[]},{"text":"impl Clone for Item","synthetic":false,"types":[]},{"text":"impl Clone for ItemConst","synthetic":false,"types":[]},{"text":"impl Clone for ItemEnum","synthetic":false,"types":[]},{"text":"impl Clone for ItemExternCrate","synthetic":false,"types":[]},{"text":"impl Clone for ItemFn","synthetic":false,"types":[]},{"text":"impl Clone for ItemForeignMod","synthetic":false,"types":[]},{"text":"impl Clone for ItemImpl","synthetic":false,"types":[]},{"text":"impl Clone for ItemMacro","synthetic":false,"types":[]},{"text":"impl Clone for ItemMacro2","synthetic":false,"types":[]},{"text":"impl Clone for ItemMod","synthetic":false,"types":[]},{"text":"impl Clone for ItemStatic","synthetic":false,"types":[]},{"text":"impl Clone for ItemStruct","synthetic":false,"types":[]},{"text":"impl Clone for ItemTrait","synthetic":false,"types":[]},{"text":"impl Clone for ItemTraitAlias","synthetic":false,"types":[]},{"text":"impl Clone for ItemType","synthetic":false,"types":[]},{"text":"impl Clone for ItemUnion","synthetic":false,"types":[]},{"text":"impl Clone for ItemUse","synthetic":false,"types":[]},{"text":"impl Clone for Label","synthetic":false,"types":[]},{"text":"impl Clone for LifetimeDef","synthetic":false,"types":[]},{"text":"impl Clone for Lit","synthetic":false,"types":[]},{"text":"impl Clone for LitBool","synthetic":false,"types":[]},{"text":"impl Clone for Local","synthetic":false,"types":[]},{"text":"impl Clone for Macro","synthetic":false,"types":[]},{"text":"impl Clone for MacroDelimiter","synthetic":false,"types":[]},{"text":"impl Clone for Member","synthetic":false,"types":[]},{"text":"impl Clone for Meta","synthetic":false,"types":[]},{"text":"impl Clone for MetaList","synthetic":false,"types":[]},{"text":"impl Clone for MetaNameValue","synthetic":false,"types":[]},{"text":"impl Clone for MethodTurbofish","synthetic":false,"types":[]},{"text":"impl Clone for NestedMeta","synthetic":false,"types":[]},{"text":"impl Clone for ParenthesizedGenericArguments","synthetic":false,"types":[]},{"text":"impl Clone for Pat","synthetic":false,"types":[]},{"text":"impl Clone for PatBox","synthetic":false,"types":[]},{"text":"impl Clone for PatIdent","synthetic":false,"types":[]},{"text":"impl Clone for PatLit","synthetic":false,"types":[]},{"text":"impl Clone for PatMacro","synthetic":false,"types":[]},{"text":"impl Clone for PatOr","synthetic":false,"types":[]},{"text":"impl Clone for PatPath","synthetic":false,"types":[]},{"text":"impl Clone for PatRange","synthetic":false,"types":[]},{"text":"impl Clone for PatReference","synthetic":false,"types":[]},{"text":"impl Clone for PatRest","synthetic":false,"types":[]},{"text":"impl Clone for PatSlice","synthetic":false,"types":[]},{"text":"impl Clone for PatStruct","synthetic":false,"types":[]},{"text":"impl Clone for PatTuple","synthetic":false,"types":[]},{"text":"impl Clone for PatTupleStruct","synthetic":false,"types":[]},{"text":"impl Clone for PatType","synthetic":false,"types":[]},{"text":"impl Clone for PatWild","synthetic":false,"types":[]},{"text":"impl Clone for Path","synthetic":false,"types":[]},{"text":"impl Clone for PathArguments","synthetic":false,"types":[]},{"text":"impl Clone for PathSegment","synthetic":false,"types":[]},{"text":"impl Clone for PredicateEq","synthetic":false,"types":[]},{"text":"impl Clone for PredicateLifetime","synthetic":false,"types":[]},{"text":"impl Clone for PredicateType","synthetic":false,"types":[]},{"text":"impl Clone for QSelf","synthetic":false,"types":[]},{"text":"impl Clone for RangeLimits","synthetic":false,"types":[]},{"text":"impl Clone for Receiver","synthetic":false,"types":[]},{"text":"impl Clone for ReturnType","synthetic":false,"types":[]},{"text":"impl Clone for Signature","synthetic":false,"types":[]},{"text":"impl Clone for Stmt","synthetic":false,"types":[]},{"text":"impl Clone for TraitBound","synthetic":false,"types":[]},{"text":"impl Clone for TraitBoundModifier","synthetic":false,"types":[]},{"text":"impl Clone for TraitItem","synthetic":false,"types":[]},{"text":"impl Clone for TraitItemConst","synthetic":false,"types":[]},{"text":"impl Clone for TraitItemMacro","synthetic":false,"types":[]},{"text":"impl Clone for TraitItemMethod","synthetic":false,"types":[]},{"text":"impl Clone for TraitItemType","synthetic":false,"types":[]},{"text":"impl Clone for Type","synthetic":false,"types":[]},{"text":"impl Clone for TypeArray","synthetic":false,"types":[]},{"text":"impl Clone for TypeBareFn","synthetic":false,"types":[]},{"text":"impl Clone for TypeGroup","synthetic":false,"types":[]},{"text":"impl Clone for TypeImplTrait","synthetic":false,"types":[]},{"text":"impl Clone for TypeInfer","synthetic":false,"types":[]},{"text":"impl Clone for TypeMacro","synthetic":false,"types":[]},{"text":"impl Clone for TypeNever","synthetic":false,"types":[]},{"text":"impl Clone for TypeParam","synthetic":false,"types":[]},{"text":"impl Clone for TypeParamBound","synthetic":false,"types":[]},{"text":"impl Clone for TypeParen","synthetic":false,"types":[]},{"text":"impl Clone for TypePath","synthetic":false,"types":[]},{"text":"impl Clone for TypePtr","synthetic":false,"types":[]},{"text":"impl Clone for TypeReference","synthetic":false,"types":[]},{"text":"impl Clone for TypeSlice","synthetic":false,"types":[]},{"text":"impl Clone for TypeTraitObject","synthetic":false,"types":[]},{"text":"impl Clone for TypeTuple","synthetic":false,"types":[]},{"text":"impl Clone for UnOp","synthetic":false,"types":[]},{"text":"impl Clone for UseGlob","synthetic":false,"types":[]},{"text":"impl Clone for UseGroup","synthetic":false,"types":[]},{"text":"impl Clone for UseName","synthetic":false,"types":[]},{"text":"impl Clone for UsePath","synthetic":false,"types":[]},{"text":"impl Clone for UseRename","synthetic":false,"types":[]},{"text":"impl Clone for UseTree","synthetic":false,"types":[]},{"text":"impl Clone for Variadic","synthetic":false,"types":[]},{"text":"impl Clone for Variant","synthetic":false,"types":[]},{"text":"impl Clone for VisCrate","synthetic":false,"types":[]},{"text":"impl Clone for VisPublic","synthetic":false,"types":[]},{"text":"impl Clone for VisRestricted","synthetic":false,"types":[]},{"text":"impl Clone for Visibility","synthetic":false,"types":[]},{"text":"impl Clone for WhereClause","synthetic":false,"types":[]},{"text":"impl Clone for WherePredicate","synthetic":false,"types":[]},{"text":"impl&lt;'c, 'a&gt; Clone for StepCursor&lt;'c, 'a&gt;","synthetic":false,"types":[]},{"text":"impl Clone for Error","synthetic":false,"types":[]}];
implementors["syslog"] = [{"text":"impl Clone for Facility","synthetic":false,"types":[]},{"text":"impl Clone for Severity","synthetic":false,"types":[]},{"text":"impl Clone for Formatter3164","synthetic":false,"types":[]},{"text":"impl Clone for Formatter5424","synthetic":false,"types":[]}];
implementors["textwrap"] = [{"text":"impl Clone for NoHyphenation","synthetic":false,"types":[]},{"text":"impl Clone for HyphenSplitter","synthetic":false,"types":[]},{"text":"impl&lt;'a, S:&nbsp;Clone + WordSplitter&gt; Clone for Wrapper&lt;'a, S&gt;","synthetic":false,"types":[]}];
implementors["time"] = [{"text":"impl Clone for Duration","synthetic":false,"types":[]},{"text":"impl Clone for OutOfRangeError","synthetic":false,"types":[]},{"text":"impl Clone for Timespec","synthetic":false,"types":[]},{"text":"impl Clone for PreciseTime","synthetic":false,"types":[]},{"text":"impl Clone for SteadyTime","synthetic":false,"types":[]},{"text":"impl Clone for Tm","synthetic":false,"types":[]},{"text":"impl Clone for ParseError","synthetic":false,"types":[]}];
implementors["tinyvec"] = [{"text":"impl&lt;A:&nbsp;Clone + Array&gt; Clone for ArrayVec&lt;A&gt;","synthetic":false,"types":[]},{"text":"impl&lt;A:&nbsp;Clone + Array&gt; Clone for TinyVec&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A::Item: Clone,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["tokio"] = [{"text":"impl Clone for OpenOptions","synthetic":false,"types":[]},{"text":"impl Clone for UCred","synthetic":false,"types":[]},{"text":"impl Clone for Handle","synthetic":false,"types":[]},{"text":"impl Clone for SignalKind","synthetic":false,"types":[]},{"text":"impl Clone for BarrierWaitResult","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Clone for Sender&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Clone for Sender&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Clone for UnboundedSender&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Clone for Receiver&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Clone for Key","synthetic":false,"types":[]},{"text":"impl Clone for Instant","synthetic":false,"types":[]}];
implementors["tokio_tls"] = [{"text":"impl Clone for TlsConnector","synthetic":false,"types":[]},{"text":"impl Clone for TlsAcceptor","synthetic":false,"types":[]}];
implementors["tokio_util"] = [{"text":"impl Clone for BytesCodec","synthetic":false,"types":[]},{"text":"impl Clone for Builder","synthetic":false,"types":[]},{"text":"impl Clone for LinesCodec","synthetic":false,"types":[]}];
implementors["toml"] = [{"text":"impl Clone for Map&lt;String, Value&gt;","synthetic":false,"types":[]},{"text":"impl Clone for Value","synthetic":false,"types":[]},{"text":"impl Clone for Error","synthetic":false,"types":[]},{"text":"impl Clone for Error","synthetic":false,"types":[]}];
implementors["tracing"] = [{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for WithDispatch&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for Instrumented&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Clone for Span","synthetic":false,"types":[]}];
implementors["tracing_core"] = [{"text":"impl Clone for Identifier","synthetic":false,"types":[]},{"text":"impl Clone for Dispatch","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone + Display&gt; Clone for DisplayValue&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone + Debug&gt; Clone for DebugValue&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Clone for Field","synthetic":false,"types":[]},{"text":"impl Clone for Kind","synthetic":false,"types":[]},{"text":"impl Clone for Level","synthetic":false,"types":[]},{"text":"impl Clone for LevelFilter","synthetic":false,"types":[]},{"text":"impl Clone for ParseLevelFilterError","synthetic":false,"types":[]},{"text":"impl Clone for Id","synthetic":false,"types":[]},{"text":"impl Clone for Interest","synthetic":false,"types":[]}];
implementors["tracing_futures"] = [{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for Instrumented&lt;T&gt;","synthetic":false,"types":[]}];
implementors["unicase"] = [{"text":"impl&lt;S:&nbsp;Clone&gt; Clone for UniCase&lt;S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;S:&nbsp;Clone&gt; Clone for Ascii&lt;S&gt;","synthetic":false,"types":[]}];
implementors["unicode_bidi"] = [{"text":"impl Clone for Level","synthetic":false,"types":[]},{"text":"impl Clone for BidiClass","synthetic":false,"types":[]}];
implementors["unicode_normalization"] = [{"text":"impl&lt;I:&nbsp;Clone&gt; Clone for Decompositions&lt;I&gt;","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone&gt; Clone for Recompositions&lt;I&gt;","synthetic":false,"types":[]}];
implementors["unicode_segmentation"] = [{"text":"impl&lt;'a&gt; Clone for GraphemeIndices&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for Graphemes&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl Clone for GraphemeCursor","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for UWordBounds&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for UWordBoundIndices&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for UnicodeSentences&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for USentenceBounds&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for USentenceBoundIndices&lt;'a&gt;","synthetic":false,"types":[]}];
implementors["url"] = [{"text":"impl&lt;S:&nbsp;Clone&gt; Clone for Host&lt;S&gt;","synthetic":false,"types":[]},{"text":"impl Clone for Origin","synthetic":false,"types":[]},{"text":"impl Clone for OpaqueOrigin","synthetic":false,"types":[]},{"text":"impl Clone for ParseError","synthetic":false,"types":[]},{"text":"impl Clone for SyntaxViolation","synthetic":false,"types":[]},{"text":"impl Clone for Position","synthetic":false,"types":[]},{"text":"impl Clone for Url","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for ParseOptions&lt;'a&gt;","synthetic":false,"types":[]}];
implementors["void"] = [{"text":"impl Clone for Void","synthetic":false,"types":[]}];
implementors["want"] = [{"text":"impl Clone for SharedGiver","synthetic":false,"types":[]}];
implementors["yaml_rust"] = [{"text":"impl Clone for EmitError","synthetic":false,"types":[]},{"text":"impl Clone for Event","synthetic":false,"types":[]},{"text":"impl Clone for TEncoding","synthetic":false,"types":[]},{"text":"impl Clone for TScalarStyle","synthetic":false,"types":[]},{"text":"impl Clone for Marker","synthetic":false,"types":[]},{"text":"impl Clone for ScanError","synthetic":false,"types":[]},{"text":"impl Clone for TokenType","synthetic":false,"types":[]},{"text":"impl Clone for Token","synthetic":false,"types":[]},{"text":"impl Clone for Yaml","synthetic":false,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()