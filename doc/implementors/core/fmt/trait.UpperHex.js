(function() {var implementors = {};
implementors["bytes"] = [{"text":"impl UpperHex for Bytes","synthetic":false,"types":[]},{"text":"impl UpperHex for BytesMut","synthetic":false,"types":[]}];
implementors["itertools"] = [{"text":"impl&lt;'a, I&gt; UpperHex for Format&lt;'a, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Iterator,<br>&nbsp;&nbsp;&nbsp;&nbsp;I::Item: UpperHex,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["nix"] = [{"text":"impl UpperHex for AtFlags","synthetic":false,"types":[]},{"text":"impl UpperHex for OFlag","synthetic":false,"types":[]},{"text":"impl UpperHex for SealFlag","synthetic":false,"types":[]},{"text":"impl UpperHex for FdFlag","synthetic":false,"types":[]},{"text":"impl UpperHex for SpliceFFlags","synthetic":false,"types":[]},{"text":"impl UpperHex for FallocateFlags","synthetic":false,"types":[]},{"text":"impl UpperHex for ModuleInitFlags","synthetic":false,"types":[]},{"text":"impl UpperHex for DeleteModuleFlags","synthetic":false,"types":[]},{"text":"impl UpperHex for MsFlags","synthetic":false,"types":[]},{"text":"impl UpperHex for MntFlags","synthetic":false,"types":[]},{"text":"impl UpperHex for MQ_OFlag","synthetic":false,"types":[]},{"text":"impl UpperHex for FdFlag","synthetic":false,"types":[]},{"text":"impl UpperHex for InterfaceFlags","synthetic":false,"types":[]},{"text":"impl UpperHex for PollFlags","synthetic":false,"types":[]},{"text":"impl UpperHex for CloneFlags","synthetic":false,"types":[]},{"text":"impl UpperHex for EpollFlags","synthetic":false,"types":[]},{"text":"impl UpperHex for EpollCreateFlags","synthetic":false,"types":[]},{"text":"impl UpperHex for EfdFlags","synthetic":false,"types":[]},{"text":"impl UpperHex for MemFdCreateFlag","synthetic":false,"types":[]},{"text":"impl UpperHex for ProtFlags","synthetic":false,"types":[]},{"text":"impl UpperHex for MapFlags","synthetic":false,"types":[]},{"text":"impl UpperHex for MsFlags","synthetic":false,"types":[]},{"text":"impl UpperHex for MlockAllFlags","synthetic":false,"types":[]},{"text":"impl UpperHex for Options","synthetic":false,"types":[]},{"text":"impl UpperHex for QuotaValidFlags","synthetic":false,"types":[]},{"text":"impl UpperHex for SaFlags","synthetic":false,"types":[]},{"text":"impl UpperHex for SfdFlags","synthetic":false,"types":[]},{"text":"impl UpperHex for SockFlag","synthetic":false,"types":[]},{"text":"impl UpperHex for MsgFlags","synthetic":false,"types":[]},{"text":"impl UpperHex for SFlag","synthetic":false,"types":[]},{"text":"impl UpperHex for Mode","synthetic":false,"types":[]},{"text":"impl UpperHex for FsFlags","synthetic":false,"types":[]},{"text":"impl UpperHex for InputFlags","synthetic":false,"types":[]},{"text":"impl UpperHex for OutputFlags","synthetic":false,"types":[]},{"text":"impl UpperHex for ControlFlags","synthetic":false,"types":[]},{"text":"impl UpperHex for LocalFlags","synthetic":false,"types":[]},{"text":"impl UpperHex for WaitPidFlag","synthetic":false,"types":[]},{"text":"impl UpperHex for AddWatchFlags","synthetic":false,"types":[]},{"text":"impl UpperHex for InitFlags","synthetic":false,"types":[]},{"text":"impl UpperHex for TimerFlags","synthetic":false,"types":[]},{"text":"impl UpperHex for TimerSetTimeFlags","synthetic":false,"types":[]},{"text":"impl UpperHex for AccessFlags","synthetic":false,"types":[]}];
implementors["num_complex"] = [{"text":"impl&lt;T&gt; UpperHex for Complex&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UpperHex + Num + PartialOrd + Clone,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["openssl"] = [{"text":"impl UpperHex for CMSOptions","synthetic":false,"types":[]},{"text":"impl UpperHex for OcspFlag","synthetic":false,"types":[]},{"text":"impl UpperHex for Pkcs7Flags","synthetic":false,"types":[]},{"text":"impl UpperHex for SslOptions","synthetic":false,"types":[]},{"text":"impl UpperHex for SslMode","synthetic":false,"types":[]},{"text":"impl UpperHex for SslVerifyMode","synthetic":false,"types":[]},{"text":"impl UpperHex for SslSessionCacheMode","synthetic":false,"types":[]},{"text":"impl UpperHex for ExtensionContext","synthetic":false,"types":[]},{"text":"impl UpperHex for ShutdownState","synthetic":false,"types":[]},{"text":"impl UpperHex for X509CheckFlags","synthetic":false,"types":[]}];
implementors["structdoc"] = [{"text":"impl UpperHex for Flags","synthetic":false,"types":[]}];
implementors["tinyvec"] = [{"text":"impl&lt;A:&nbsp;Array&gt; UpperHex for ArrayVec&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A::Item: UpperHex,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'s, T&gt; UpperHex for SliceVec&lt;'s, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UpperHex,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;A:&nbsp;Array&gt; UpperHex for TinyVec&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A::Item: UpperHex,&nbsp;</span>","synthetic":false,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()