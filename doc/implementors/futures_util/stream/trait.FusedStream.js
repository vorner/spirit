(function() {var implementors = {};
implementors["futures_util"] = [{"text":"impl&lt;F&gt; FusedStream for FlattenStream&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Flatten&lt;F, &lt;F as Future&gt;::Output&gt;: FusedStream,<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Future,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;F&gt; FusedStream for IntoStream&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Once&lt;F&gt;: FusedStream,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;Fut&gt; FusedStream for TryFlattenStream&lt;Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TryFlatten&lt;Fut, Fut::Ok&gt;: FusedStream,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: TryFuture,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;A, B&gt; FusedStream for Either&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: FusedStream,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: FusedStream&lt;Item = A::Item&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;St1, St2&gt; FusedStream for Chain&lt;St1, St2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St1: Stream,<br>&nbsp;&nbsp;&nbsp;&nbsp;St2: FusedStream&lt;Item = St1::Item&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;St&gt; FusedStream for Cycle&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Clone + Stream,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;St:&nbsp;Stream + FusedStream&gt; FusedStream for Enumerate&lt;St&gt;","synthetic":false,"types":[]},{"text":"impl&lt;St, Fut, F&gt; FusedStream for Filter&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Stream + FusedStream,<br>&nbsp;&nbsp;&nbsp;&nbsp;F: FnMut(&amp;St::Item) -&gt; Fut,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Future&lt;Output = bool&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;St, Fut, F, T&gt; FusedStream for FilterMap&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Stream + FusedStream,<br>&nbsp;&nbsp;&nbsp;&nbsp;F: FnMut1&lt;St::Item, Output = Fut&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Future&lt;Output = Option&lt;T&gt;&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;St&gt; FusedStream for Flatten&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Flatten&lt;St, St::Item&gt;: FusedStream,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Stream,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;S:&nbsp;Stream&gt; FusedStream for Fuse&lt;S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;St, F&gt; FusedStream for Inspect&lt;St, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Map&lt;St, InspectFn&lt;F&gt;&gt;: FusedStream,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;St, F&gt; FusedStream for Map&lt;St, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: FusedStream,<br>&nbsp;&nbsp;&nbsp;&nbsp;F: FnMut1&lt;St::Item&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;St, U, F&gt; FusedStream for FlatMap&lt;St, U, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Flatten&lt;Map&lt;St, F&gt;, U&gt;: FusedStream,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;St:&nbsp;Stream&gt; FusedStream for Peekable&lt;St&gt;","synthetic":false,"types":[]},{"text":"impl&lt;St:&nbsp;FusedStream&gt; FusedStream for Skip&lt;St&gt;","synthetic":false,"types":[]},{"text":"impl&lt;St, Fut, F&gt; FusedStream for SkipWhile&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: FusedStream,<br>&nbsp;&nbsp;&nbsp;&nbsp;F: FnMut(&amp;St::Item) -&gt; Fut,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Future&lt;Output = bool&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;St&gt; FusedStream for Take&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: FusedStream,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;St, Fut, F&gt; FusedStream for TakeWhile&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: FusedStream,<br>&nbsp;&nbsp;&nbsp;&nbsp;F: FnMut(&amp;St::Item) -&gt; Fut,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Future&lt;Output = bool&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;St, Fut&gt; FusedStream for TakeUntil&lt;St, Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Stream,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Future,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;St, Fut, F&gt; FusedStream for Then&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: FusedStream,<br>&nbsp;&nbsp;&nbsp;&nbsp;F: FnMut(St::Item) -&gt; Fut,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Future,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;St1, St2&gt; FusedStream for Zip&lt;St1, St2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St1: Stream,<br>&nbsp;&nbsp;&nbsp;&nbsp;St2: Stream,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;St:&nbsp;FusedStream&gt; FusedStream for Chunks&lt;St&gt;","synthetic":false,"types":[]},{"text":"impl&lt;St:&nbsp;FusedStream&gt; FusedStream for ReadyChunks&lt;St&gt;","synthetic":false,"types":[]},{"text":"impl&lt;B, St, S, Fut, F&gt; FusedStream for Scan&lt;St, S, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: FusedStream,<br>&nbsp;&nbsp;&nbsp;&nbsp;F: FnMut(&amp;mut S, St::Item) -&gt; Fut,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Future&lt;Output = Option&lt;B&gt;&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;St&gt; FusedStream for BufferUnordered&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Stream,<br>&nbsp;&nbsp;&nbsp;&nbsp;St::Item: Future,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;St:&nbsp;FusedStream + UnwindSafe&gt; FusedStream for CatchUnwind&lt;St&gt;","synthetic":false,"types":[]},{"text":"impl&lt;St, Fut, F&gt; FusedStream for AndThen&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: TryStream + FusedStream,<br>&nbsp;&nbsp;&nbsp;&nbsp;F: FnMut(St::Ok) -&gt; Fut,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: TryFuture&lt;Error = St::Error&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;St, E&gt; FusedStream for ErrInto&lt;St, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;MapErr&lt;St, IntoFn&lt;E&gt;&gt;: FusedStream,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;St, F&gt; FusedStream for InspectOk&lt;St, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Inspect&lt;IntoStream&lt;St&gt;, InspectOkFn&lt;F&gt;&gt;: FusedStream,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;St, F&gt; FusedStream for InspectErr&lt;St, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Inspect&lt;IntoStream&lt;St&gt;, InspectErrFn&lt;F&gt;&gt;: FusedStream,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;St:&nbsp;TryStream + FusedStream&gt; FusedStream for IntoStream&lt;St&gt;","synthetic":false,"types":[]},{"text":"impl&lt;St, F&gt; FusedStream for MapOk&lt;St, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Map&lt;IntoStream&lt;St&gt;, MapOkFn&lt;F&gt;&gt;: FusedStream,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;St, F&gt; FusedStream for MapErr&lt;St, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Map&lt;IntoStream&lt;St&gt;, MapErrFn&lt;F&gt;&gt;: FusedStream,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;St, Fut, F&gt; FusedStream for OrElse&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: TryStream + FusedStream,<br>&nbsp;&nbsp;&nbsp;&nbsp;F: FnMut(St::Error) -&gt; Fut,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: TryFuture&lt;Ok = St::Ok&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;St, Fut, F&gt; FusedStream for TryFilter&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: TryStream + FusedStream,<br>&nbsp;&nbsp;&nbsp;&nbsp;F: FnMut(&amp;St::Ok) -&gt; Fut,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Future&lt;Output = bool&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;St, Fut, F, T&gt; FusedStream for TryFilterMap&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: TryStream + FusedStream,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: TryFuture&lt;Ok = Option&lt;T&gt;, Error = St::Error&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;F: FnMut(St::Ok) -&gt; Fut,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;St&gt; FusedStream for TryFlatten&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: TryStream + FusedStream,<br>&nbsp;&nbsp;&nbsp;&nbsp;St::Ok: TryStream,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St::Ok as TryStream&gt;::Error: From&lt;St::Error&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;St, Fut, F&gt; FusedStream for TrySkipWhile&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: TryStream + FusedStream,<br>&nbsp;&nbsp;&nbsp;&nbsp;F: FnMut(&amp;St::Ok) -&gt; Fut,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: TryFuture&lt;Ok = bool, Error = St::Error&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;St, Fut, F&gt; FusedStream for TryTakeWhile&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: TryStream + FusedStream,<br>&nbsp;&nbsp;&nbsp;&nbsp;F: FnMut(&amp;St::Ok) -&gt; Fut,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: TryFuture&lt;Ok = bool, Error = St::Error&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; FusedStream for Repeat&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; FusedStream for Empty&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;Fut:&nbsp;Future&gt; FusedStream for Once&lt;Fut&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; FusedStream for Pending&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;St1, St2&gt; FusedStream for Select&lt;St1, St2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St1: Stream,<br>&nbsp;&nbsp;&nbsp;&nbsp;St2: Stream&lt;Item = St1::Item&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T, F, Fut, Item&gt; FusedStream for Unfold&lt;T, F, Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: FnMut(T) -&gt; Fut,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Future&lt;Output = Option&lt;(Item, T)&gt;&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;Fut:&nbsp;Future&gt; FusedStream for FuturesOrdered&lt;Fut&gt;","synthetic":false,"types":[]},{"text":"impl&lt;Fut:&nbsp;Future&gt; FusedStream for FuturesUnordered&lt;Fut&gt;","synthetic":false,"types":[]},{"text":"impl&lt;St:&nbsp;Stream + Unpin&gt; FusedStream for SelectAll&lt;St&gt;","synthetic":false,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()