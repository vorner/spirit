(function() {var implementors = {};
implementors["futures_util"] = [{"text":"impl&lt;Fut:&nbsp;Future&gt; Future for Fuse&lt;Fut&gt;","synthetic":false,"types":[]},{"text":"impl&lt;F&gt; Future for Flatten&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Flatten&lt;F, &lt;F as Future&gt;::Output&gt;: Future,<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Future,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;Fut, F&gt; Future for Map&lt;Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Map&lt;Fut, F&gt;: Future,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;Fut, T&gt; Future for MapInto&lt;Fut, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Map&lt;Fut, IntoFn&lt;T&gt;&gt;: Future,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;Fut1, Fut2, F&gt; Future for Then&lt;Fut1, Fut2, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Flatten&lt;Map&lt;Fut1, F&gt;, Fut2&gt;: Future,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;Fut, F&gt; Future for Inspect&lt;Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Map&lt;Fut, InspectFn&lt;F&gt;&gt;: Future,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;Fut&gt; Future for NeverError&lt;Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Map&lt;Fut, OkFn&lt;Never&gt;&gt;: Future,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;Fut&gt; Future for UnitError&lt;Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Map&lt;Fut, OkFn&lt;()&gt;&gt;: Future,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;Fut&gt; Future for CatchUnwind&lt;Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Future + UnwindSafe,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;Fut&gt; Future for Shared&lt;Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Future,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut::Output: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;Fut:&nbsp;TryFuture&gt; Future for IntoFuture&lt;Fut&gt;","synthetic":false,"types":[]},{"text":"impl&lt;Fut1, Fut2&gt; Future for TryFlatten&lt;Fut1, Fut2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TryFlatten&lt;Fut1, Fut2&gt;: Future,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;Fut1, Fut2, F&gt; Future for AndThen&lt;Fut1, Fut2, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TryFlatten&lt;MapOk&lt;Fut1, F&gt;, Fut2&gt;: Future,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;Fut1, Fut2, F&gt; Future for OrElse&lt;Fut1, Fut2, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TryFlattenErr&lt;MapErr&lt;Fut1, F&gt;, Fut2&gt;: Future,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;Fut, E&gt; Future for ErrInto&lt;Fut, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;MapErr&lt;Fut, IntoFn&lt;E&gt;&gt;: Future,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;Fut, E&gt; Future for OkInto&lt;Fut, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;MapOk&lt;Fut, IntoFn&lt;E&gt;&gt;: Future,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;Fut, F&gt; Future for InspectOk&lt;Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Inspect&lt;IntoFuture&lt;Fut&gt;, InspectOkFn&lt;F&gt;&gt;: Future,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;Fut, F&gt; Future for InspectErr&lt;Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Inspect&lt;IntoFuture&lt;Fut&gt;, InspectErrFn&lt;F&gt;&gt;: Future,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;Fut, F&gt; Future for MapOk&lt;Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Map&lt;IntoFuture&lt;Fut&gt;, MapOkFn&lt;F&gt;&gt;: Future,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;Fut, F&gt; Future for MapErr&lt;Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Map&lt;IntoFuture&lt;Fut&gt;, MapErrFn&lt;F&gt;&gt;: Future,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;Fut, F, G&gt; Future for MapOkOrElse&lt;Fut, F, G&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Map&lt;IntoFuture&lt;Fut&gt;, ChainFn&lt;MapOkFn&lt;F&gt;, ChainFn&lt;MapErrFn&lt;G&gt;, MergeResultFn&gt;&gt;&gt;: Future,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;Fut, F&gt; Future for UnwrapOrElse&lt;Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Map&lt;IntoFuture&lt;Fut&gt;, UnwrapOrElseFn&lt;F&gt;&gt;: Future,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;F, R&gt; Future for Lazy&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: FnOnce(&amp;mut Context&lt;'_&gt;) -&gt; R,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Future for Pending&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;Fut:&nbsp;Future&gt; Future for MaybeDone&lt;Fut&gt;","synthetic":false,"types":[]},{"text":"impl&lt;Fut:&nbsp;TryFuture&gt; Future for TryMaybeDone&lt;Fut&gt;","synthetic":false,"types":[]},{"text":"impl&lt;F:&nbsp;Future&gt; Future for OptionFuture&lt;F&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T, F&gt; Future for PollFn&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: FnMut(&amp;mut Context&lt;'_&gt;) -&gt; Poll&lt;T&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Future for Ready&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;Fut1:&nbsp;Future, Fut2:&nbsp;Future&gt; Future for Join&lt;Fut1, Fut2&gt;","synthetic":false,"types":[]},{"text":"impl&lt;Fut1:&nbsp;Future, Fut2:&nbsp;Future, Fut3:&nbsp;Future&gt; Future for Join3&lt;Fut1, Fut2, Fut3&gt;","synthetic":false,"types":[]},{"text":"impl&lt;Fut1:&nbsp;Future, Fut2:&nbsp;Future, Fut3:&nbsp;Future, Fut4:&nbsp;Future&gt; Future for Join4&lt;Fut1, Fut2, Fut3, Fut4&gt;","synthetic":false,"types":[]},{"text":"impl&lt;Fut1:&nbsp;Future, Fut2:&nbsp;Future, Fut3:&nbsp;Future, Fut4:&nbsp;Future, Fut5:&nbsp;Future&gt; Future for Join5&lt;Fut1, Fut2, Fut3, Fut4, Fut5&gt;","synthetic":false,"types":[]},{"text":"impl&lt;F&gt; Future for JoinAll&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Future,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;A, B&gt; Future for Select&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Future + Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Future + Unpin,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;Fut:&nbsp;Future + Unpin&gt; Future for SelectAll&lt;Fut&gt;","synthetic":false,"types":[]},{"text":"impl&lt;Fut1, Fut2&gt; Future for TryJoin&lt;Fut1, Fut2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut1: TryFuture,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut2: TryFuture&lt;Error = Fut1::Error&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;Fut1, Fut2, Fut3&gt; Future for TryJoin3&lt;Fut1, Fut2, Fut3&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut1: TryFuture,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut2: TryFuture&lt;Error = Fut1::Error&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut3: TryFuture&lt;Error = Fut1::Error&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;Fut1, Fut2, Fut3, Fut4&gt; Future for TryJoin4&lt;Fut1, Fut2, Fut3, Fut4&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut1: TryFuture,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut2: TryFuture&lt;Error = Fut1::Error&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut3: TryFuture&lt;Error = Fut1::Error&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut4: TryFuture&lt;Error = Fut1::Error&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;Fut1, Fut2, Fut3, Fut4, Fut5&gt; Future for TryJoin5&lt;Fut1, Fut2, Fut3, Fut4, Fut5&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut1: TryFuture,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut2: TryFuture&lt;Error = Fut1::Error&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut3: TryFuture&lt;Error = Fut1::Error&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut4: TryFuture&lt;Error = Fut1::Error&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut5: TryFuture&lt;Error = Fut1::Error&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;F&gt; Future for TryJoinAll&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: TryFuture,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;A:&nbsp;Unpin, B:&nbsp;Unpin&gt; Future for TrySelect&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: TryFuture,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: TryFuture,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;Fut:&nbsp;TryFuture + Unpin&gt; Future for SelectOk&lt;Fut&gt;","synthetic":false,"types":[]},{"text":"impl&lt;A, B&gt; Future for Either&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Future,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Future&lt;Output = A::Output&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;Fut&gt; Future for Abortable&lt;Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Future,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;St, C&gt; Future for Collect&lt;St, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Stream,<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Default + Extend&lt;St::Item&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;St&gt; Future for Concat&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Stream,<br>&nbsp;&nbsp;&nbsp;&nbsp;St::Item: Extend&lt;&lt;St::Item as IntoIterator&gt;::Item&gt; + IntoIterator + Default,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;St, Fut, T, F&gt; Future for Fold&lt;St, Fut, T, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Stream,<br>&nbsp;&nbsp;&nbsp;&nbsp;F: FnMut(T, St::Item) -&gt; Fut,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Future&lt;Output = T&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;St, Fut, F&gt; Future for ForEach&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Stream,<br>&nbsp;&nbsp;&nbsp;&nbsp;F: FnMut(St::Item) -&gt; Fut,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Future&lt;Output = ()&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;St:&nbsp;Stream + Unpin&gt; Future for StreamFuture&lt;St&gt;","synthetic":false,"types":[]},{"text":"impl&lt;St:&nbsp;?Sized + Stream + Unpin, '_&gt; Future for Next&lt;'_, St&gt;","synthetic":false,"types":[]},{"text":"impl&lt;St:&nbsp;?Sized + FusedStream + Unpin, '_&gt; Future for SelectNextSome&lt;'_, St&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, St&gt; Future for Peek&lt;'a, St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Stream,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;St, Fut, F&gt; Future for ForEachConcurrent&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Stream,<br>&nbsp;&nbsp;&nbsp;&nbsp;F: FnMut(St::Item) -&gt; Fut,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Future&lt;Output = ()&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;St:&nbsp;?Sized + TryStream + Unpin, '_&gt; Future for TryNext&lt;'_, St&gt;","synthetic":false,"types":[]},{"text":"impl&lt;St, Fut, F&gt; Future for TryForEach&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: TryStream,<br>&nbsp;&nbsp;&nbsp;&nbsp;F: FnMut(St::Ok) -&gt; Fut,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: TryFuture&lt;Ok = (), Error = St::Error&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;St, C&gt; Future for TryCollect&lt;St, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: TryStream,<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Default + Extend&lt;St::Ok&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;St&gt; Future for TryConcat&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: TryStream,<br>&nbsp;&nbsp;&nbsp;&nbsp;St::Ok: Extend&lt;&lt;St::Ok as IntoIterator&gt;::Item&gt; + IntoIterator + Default,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;St, Fut, T, F&gt; Future for TryFold&lt;St, Fut, T, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: TryStream,<br>&nbsp;&nbsp;&nbsp;&nbsp;F: FnMut(T, St::Ok) -&gt; Fut,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: TryFuture&lt;Ok = T, Error = St::Error&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;St, Fut, F&gt; Future for TryForEachConcurrent&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: TryStream,<br>&nbsp;&nbsp;&nbsp;&nbsp;F: FnMut(St::Ok) -&gt; Fut,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Future&lt;Output = Result&lt;(), St::Error&gt;&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;W:&nbsp;AsyncWrite + ?Sized + Unpin, '_&gt; Future for Close&lt;'_, W&gt;","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;AsyncRead, W:&nbsp;AsyncWrite + Unpin + ?Sized, '_&gt; Future for Copy&lt;'_, R, W&gt;","synthetic":false,"types":[]},{"text":"impl&lt;R, W:&nbsp;?Sized, '_&gt; Future for CopyBuf&lt;'_, R, W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: AsyncBufRead,<br>&nbsp;&nbsp;&nbsp;&nbsp;W: AsyncWrite + Unpin,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, R:&nbsp;?Sized&gt; Future for FillBuf&lt;'a, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: AsyncBufRead + Unpin,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;W:&nbsp;?Sized, '_&gt; Future for Flush&lt;'_, W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: AsyncWrite + Unpin,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;AsyncRead + ?Sized + Unpin, '_&gt; Future for Read&lt;'_, R&gt;","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;AsyncRead + ?Sized + Unpin, '_&gt; Future for ReadVectored&lt;'_, R&gt;","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;AsyncRead + ?Sized + Unpin, '_&gt; Future for ReadExact&lt;'_, R&gt;","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;AsyncBufRead + ?Sized + Unpin, '_&gt; Future for ReadLine&lt;'_, R&gt;","synthetic":false,"types":[]},{"text":"impl&lt;A:&nbsp;?Sized, '_&gt; Future for ReadToEnd&lt;'_, A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: AsyncRead + Unpin,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;A:&nbsp;?Sized, '_&gt; Future for ReadToString&lt;'_, A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: AsyncRead + Unpin,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;AsyncBufRead + ?Sized + Unpin, '_&gt; Future for ReadUntil&lt;'_, R&gt;","synthetic":false,"types":[]},{"text":"impl&lt;S:&nbsp;AsyncSeek + ?Sized + Unpin, '_&gt; Future for Seek&lt;'_, S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;W:&nbsp;AsyncWrite + ?Sized + Unpin, '_&gt; Future for Write&lt;'_, W&gt;","synthetic":false,"types":[]},{"text":"impl&lt;W:&nbsp;AsyncWrite + ?Sized + Unpin, '_&gt; Future for WriteVectored&lt;'_, W&gt;","synthetic":false,"types":[]},{"text":"impl&lt;W:&nbsp;AsyncWrite + ?Sized + Unpin, '_&gt; Future for WriteAll&lt;'_, W&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, T:&nbsp;?Sized&gt; Future for MutexLockFuture&lt;'a, T&gt;","synthetic":false,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()